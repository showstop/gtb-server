#include <ServerBase/client_crypto.h>

#include <iostream>

#include <rsa.h>
#include <hex.h>
#include <osrng.h>
#include <filters.h>
#include <aes.h>

namespace crypto {

	//const std::string priv_key = "308204BA020100300D06092A864886F70D0101010500048204A4308204A00201000282010100D7256781F4FB2AA59323226769262ED7EC631937E9AE85C817444E18BBEC360A84BACBF19B63CC42EF8EA409B6E750E82CE4DA1F6A3A7549377988677911C53CD340E5B519CB194089A3DAF0A8C9386AD4BC8FE3EEBDC04155183ACB4DAF5FE85988BE80F95A755C67D503E5C8936DE58ED2DE9C2AF796FB17920B986D876B2E309D6E0207C76D27C6762A58F2255F5F54EC0936E3838D11C6E7BBF45B7EBE7EBD0461061AF75E2602732C823EDE69E8283D24CF3F3607A1D9EF4BB6A7A8F483A894934697E2323FDEDA3091C8E64F06ECEE9A3722D086C6F48440C2540733E673C3FBD384DBB6CA5C6B12EDFDB5FA04DD8BADCE4AF2E86216602C75DB970E63020111028201000653EC74C370CC8C6635BD3F46DB79D92C9980BDE139D6C21ECD4D9750D23DD322057E780C198601F7FCAA78C19D6443106115796501B827CCECFC7B838F94DC2454BB764485F9369AA2EFD9E6D8BDE50641C7FF2CAB3A5C46447A3327EE91E12FCF50E5ACFB2191C6D18F2C67C819D20BBAE86E01438470CBFCC41B1247BF632FDBE13CDC4AD770E8CEB1B47F08F29C6D4D0445F03BEE3A4BFDED87DAC068DFF271935F50D30D3F44612672382385EA2A7A7631FF7856C19A0905C0552F0DFF254671D17AB97C9E3E6EB9FD2E3654033BAE3B432B3E772EFF54D86B13AD86630B7E07D47CE32B21DC7F703449B52A068768504E5B4E56FC75885C14735E24E502818100EDCB89C5593F71B14A880C1B28381E0E21B97497820177459AC48C0492AEF16455A789025637D6253343BC2CA8937E6914BD8D16F7DDEED393AD1243D06E229A96FFAF1A4595F0D80BAB6D0E11EA189C9F1B38036A45929C00B831802EC96C67886B5C2ADAF93FBDF66F99684FF3A191E5C9B02418CE30516BDD947EE658184F02818100E79DFA276C975E77907A8444EABD088AAEF80355798C720E1469A3E4BB41DF5C3447455B08B7C599BA48552A219322656F3BE514595C9317D10F75E786FAF6061E39C65A05A9B463887A0FE393C50DFC60AF8347FA3F1FED0A8751098831EE57649B957013B6BC8D1D0E9293E3B2C394FBE7534211BD2A890E665D3FA2BE0FAD02818045F091EEBFE57BCABB916CF8EDB626F518FA4F77DAF15F50B50CA1A6FDF737F0556D82A65597F3B0969B7394AA0D434C1528B106C15F645C589C50AA8898DD004A876FBC6ED1BF4E9A053E315090255B3DDAD43D3D5FC1B5699F9616A4595C1E736ADEDF6D949A46EE20D2C453C0207634869D37CB0F779F7A13FE7FAD28F817028180441F67B13E0E67141B6F5414450A6BEC8DD079737E1A3FA9C9C4B7BBBE9AE7575AAB8CDE8A17EED2DC6FA093EBC1DCF0A83ECAE7DE0C2B433D7D048F63EF7589542F1C389840F8D1FAF6B9610D58132C1C6FDB5167B836910318BD7B462CCDA13BB54A11E7AE3774CC4F9485D98EEE3AE0AD72D73264D0466DA5A2F49946F58D0281804DB3EDA8617A942DD949D089B64C622442C295F82FFB895D592AD5EA5028F75ECE3DEDD23352E15167EA0D8616BBD2CE5317DB18798BB26BD149468025C20AA93CC57A37DA02F21025C101B57980C1C55DA727D9CDC0C1318641B64F0E13286B356528AA03725E3FE513A2FDC4834644D6E6324C60515D50CDAF12B4FC08929C";

	SB_EXPORT_API void decrypt_session_key(const unsigned char* encrypted_session_key, const unsigned char* encrypted_iv, const char* rsa_private_key, 
		unsigned char* decrypted_session_key, unsigned char* decrypted_iv)
	{
		CryptoPP::AutoSeededRandomPool rnd;

		CryptoPP::RSASSA_PKCS1v15_SHA_Signer private_key( CryptoPP::StringSource(rsa_private_key, true, new CryptoPP::HexDecoder) );
		CryptoPP::RSAES_OAEP_SHA_Decryptor decrytor( private_key );

		const int RSA_ENCRYPTED_KEY_LEN = 256;

		CryptoPP::ArraySource(encrypted_session_key, RSA_ENCRYPTED_KEY_LEN, true, new CryptoPP::PK_DecryptorFilter(rnd, decrytor, 
			new CryptoPP::ArraySink(decrypted_session_key, CryptoPP::AES::DEFAULT_KEYLENGTH)));

		CryptoPP::ArraySource(encrypted_iv, RSA_ENCRYPTED_KEY_LEN, true, new CryptoPP::PK_DecryptorFilter(rnd, decrytor,
			new CryptoPP::ArraySink(decrypted_iv, CryptoPP::AES::BLOCKSIZE)));
	}

}