// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_INTERNAL_LS_MMS_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_INTERNAL_LS_MMS_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "player.dc.h"

namespace protocol
{

class internal_register_player_req;
class internal_register_player_ans;
class internal_unregister_player_req;
class internal_unregister_player_ans;
class internal_match_player_info;
class internal_create_ps_req;
class internal_create_ps_ans;
class internal_match_complete_notify;

enum MatchState
{
    MatchState_IDLE = 0,
    MatchState_SEARCHING = 1,
    MatchState_PREPARE_MATCHING = 2,
    MatchState_COMPLETE = 3,
};    // enum MatchState

// ================================================================================================

class internal_register_player_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    SpringCat::int32_t mode_;
    std::auto_ptr<player_profile_info> info_;
    std::auto_ptr<match_item_info> using_match_items_;

public:
    internal_register_player_req(void);
    internal_register_player_req(const internal_register_player_req& from);
    virtual ~internal_register_player_req(void);

    inline internal_register_player_req& operator=(const internal_register_player_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_register_player_req* new_instance(void) const;
    virtual internal_register_player_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_register_player_req& from);
    void merge_from(const internal_register_player_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // mode
    GameMode get_mode(void) const;
    void set_mode(GameMode value);

    // info
    const player_profile_info* get_info(void) const;
    player_profile_info* get_mutable_info(void);

    // using_match_items
    const match_item_info* get_using_match_items(void) const;
    match_item_info* get_mutable_using_match_items(void);
};
// ------------------------------------------------------------------------------------------------

class internal_register_player_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::int32_t estimated_sec_;
    SpringCat::uint64_t dest_player_no_;

public:
    internal_register_player_ans(void);
    internal_register_player_ans(const internal_register_player_ans& from);
    virtual ~internal_register_player_ans(void);

    inline internal_register_player_ans& operator=(const internal_register_player_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_register_player_ans* new_instance(void) const;
    virtual internal_register_player_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_register_player_ans& from);
    void merge_from(const internal_register_player_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // estimated_sec
    SpringCat::int32_t get_estimated_sec(void) const;
    void set_estimated_sec(SpringCat::int32_t value);

    // dest_player_no
    SpringCat::uint64_t get_dest_player_no(void) const;
    void set_dest_player_no(SpringCat::uint64_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_unregister_player_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int32_t mode_;
    SpringCat::uint64_t player_no_;

public:
    internal_unregister_player_req(void);
    internal_unregister_player_req(const internal_unregister_player_req& from);
    virtual ~internal_unregister_player_req(void);

    inline internal_unregister_player_req& operator=(const internal_unregister_player_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_unregister_player_req* new_instance(void) const;
    virtual internal_unregister_player_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_unregister_player_req& from);
    void merge_from(const internal_unregister_player_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // mode
    GameMode get_mode(void) const;
    void set_mode(GameMode value);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_unregister_player_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::uint64_t dest_player_no_;

public:
    internal_unregister_player_ans(void);
    internal_unregister_player_ans(const internal_unregister_player_ans& from);
    virtual ~internal_unregister_player_ans(void);

    inline internal_unregister_player_ans& operator=(const internal_unregister_player_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_unregister_player_ans* new_instance(void) const;
    virtual internal_unregister_player_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_unregister_player_ans& from);
    void merge_from(const internal_unregister_player_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // dest_player_no
    SpringCat::uint64_t get_dest_player_no(void) const;
    void set_dest_player_no(SpringCat::uint64_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_match_player_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    bool is_ai_;
    std::vector<SpringCat::int8_t> binded_xnet_addr_;

public:
    internal_match_player_info(void);
    internal_match_player_info(const internal_match_player_info& from);
    virtual ~internal_match_player_info(void);

    inline internal_match_player_info& operator=(const internal_match_player_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_match_player_info* new_instance(void) const;
    virtual internal_match_player_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_match_player_info& from);
    void merge_from(const internal_match_player_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // is_ai
    bool get_is_ai(void) const;
    void set_is_ai(bool value);

    // binded_xnet_addr
    const std::vector<SpringCat::int8_t>& get_binded_xnet_addr(void) const;
    std::vector<SpringCat::int8_t>* get_mutable_binded_xnet_addr(void);
    SpringCat::int8_t get_binded_xnet_addr(size_t index) const;
    void set_binded_xnet_addr(size_t index, SpringCat::int8_t value);
    void add_binded_xnet_addr(SpringCat::int8_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_create_ps_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<4> __has_bits__;

private:
    SpringCat::int32_t mode_;
    SpringCat::uint32_t room_no_;
    std::map<SpringCat::uint64_t, internal_match_player_info*> match_players_;
    SpringCat::int32_t map_no_;

public:
    internal_create_ps_req(void);
    internal_create_ps_req(const internal_create_ps_req& from);
    virtual ~internal_create_ps_req(void);

    inline internal_create_ps_req& operator=(const internal_create_ps_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_create_ps_req* new_instance(void) const;
    virtual internal_create_ps_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_create_ps_req& from);
    void merge_from(const internal_create_ps_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // mode
    GameMode get_mode(void) const;
    void set_mode(GameMode value);

    // room_no
    SpringCat::uint32_t get_room_no(void) const;
    void set_room_no(SpringCat::uint32_t value);

    // match_players
    const std::map<SpringCat::uint64_t, internal_match_player_info*>& get_match_players(void) const;
    std::map<SpringCat::uint64_t, internal_match_player_info*>* get_mutable_match_players(void);
    const internal_match_player_info* get_match_players(SpringCat::uint64_t key) const;
    internal_match_player_info* get_mutable_match_players(SpringCat::uint64_t key);
    internal_match_player_info* insert_match_players(SpringCat::uint64_t key);

    // map_no
    SpringCat::int32_t get_map_no(void) const;
    void set_map_no(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_create_ps_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<4> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::int32_t mode_;
    SpringCat::uint32_t room_no_;
    std::auto_ptr<server_address> ps_addr_;

public:
    internal_create_ps_ans(void);
    internal_create_ps_ans(const internal_create_ps_ans& from);
    virtual ~internal_create_ps_ans(void);

    inline internal_create_ps_ans& operator=(const internal_create_ps_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_create_ps_ans* new_instance(void) const;
    virtual internal_create_ps_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_create_ps_ans& from);
    void merge_from(const internal_create_ps_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // mode
    GameMode get_mode(void) const;
    void set_mode(GameMode value);

    // room_no
    SpringCat::uint32_t get_room_no(void) const;
    void set_room_no(SpringCat::uint32_t value);

    // ps_addr
    const server_address* get_ps_addr(void) const;
    server_address* get_mutable_ps_addr(void);
};
// ------------------------------------------------------------------------------------------------

class internal_match_complete_notify : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<8> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::uint64_t dest_player_no_;
    std::map<SpringCat::uint64_t, bool> player_list_;
    SpringCat::int32_t mode_;
    bool use_standalone_;
    SpringCat::int32_t map_no_;
    std::auto_ptr<server_address> ps_addr_;
    std::auto_ptr<match_item_info> using_match_items_;

public:
    internal_match_complete_notify(void);
    internal_match_complete_notify(const internal_match_complete_notify& from);
    virtual ~internal_match_complete_notify(void);

    inline internal_match_complete_notify& operator=(const internal_match_complete_notify& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_match_complete_notify* new_instance(void) const;
    virtual internal_match_complete_notify* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_match_complete_notify& from);
    void merge_from(const internal_match_complete_notify& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // dest_player_no
    SpringCat::uint64_t get_dest_player_no(void) const;
    void set_dest_player_no(SpringCat::uint64_t value);

    // player_list
    const std::map<SpringCat::uint64_t, bool>& get_player_list(void) const;
    std::map<SpringCat::uint64_t, bool>* get_mutable_player_list(void);
    bool get_player_list(SpringCat::uint64_t key, bool* value) const;
    void set_player_list(SpringCat::uint64_t key, bool value);
    bool insert_player_list(SpringCat::uint64_t key, bool value);

    // mode
    GameMode get_mode(void) const;
    void set_mode(GameMode value);

    // use_standalone
    bool get_use_standalone(void) const;
    void set_use_standalone(bool value);

    // map_no
    SpringCat::int32_t get_map_no(void) const;
    void set_map_no(SpringCat::int32_t value);

    // ps_addr
    const server_address* get_ps_addr(void) const;
    server_address* get_mutable_ps_addr(void);

    // using_match_items
    const match_item_info* get_using_match_items(void) const;
    match_item_info* get_mutable_using_match_items(void);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_INTERNAL_LS_MMS_DC_INCLUDE__
