// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_REWARD_STATION_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_REWARD_STATION_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "common_def.dc.h"

namespace protocol
{

class reward_station_info;
class reward_station_info_req;
class reward_station_info_ans;
class reward_station_video_ad_req;
class reward_station_video_ad_ans;
class reward_station_video_ad_complete_req;
class reward_station_video_ad_complete_ans;
class reward_station_fb_post_req;
class reward_station_fb_post_ans;
class reward_station_fb_invite_req;
class reward_station_fb_invite_ans;
class reward_station_gold_bonus_req;
class reward_station_gold_bonus_ans;

// ================================================================================================

class reward_station_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<7> __has_bits__;

private:
    std::auto_ptr<reward_info> video_ad_;
    SpringCat::int64_t next_video_ad_time_;
    std::auto_ptr<reward_info> fb_post_;
    SpringCat::int64_t next_fb_post_;
    std::auto_ptr<reward_info> fb_invite_;
    std::auto_ptr<reward_info> gold_bonus_;
    SpringCat::int64_t next_gold_bonus_;

public:
    reward_station_info(void);
    reward_station_info(const reward_station_info& from);
    virtual ~reward_station_info(void);

    inline reward_station_info& operator=(const reward_station_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_info* new_instance(void) const;
    virtual reward_station_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_info& from);
    void merge_from(const reward_station_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // video_ad
    const reward_info* get_video_ad(void) const;
    reward_info* get_mutable_video_ad(void);

    // next_video_ad_time
    SpringCat::int64_t get_next_video_ad_time(void) const;
    void set_next_video_ad_time(SpringCat::int64_t value);

    // fb_post
    const reward_info* get_fb_post(void) const;
    reward_info* get_mutable_fb_post(void);

    // next_fb_post
    SpringCat::int64_t get_next_fb_post(void) const;
    void set_next_fb_post(SpringCat::int64_t value);

    // fb_invite
    const reward_info* get_fb_invite(void) const;
    reward_info* get_mutable_fb_invite(void);

    // gold_bonus
    const reward_info* get_gold_bonus(void) const;
    reward_info* get_mutable_gold_bonus(void);

    // next_gold_bonus
    SpringCat::int64_t get_next_gold_bonus(void) const;
    void set_next_gold_bonus(SpringCat::int64_t value);
};
// ------------------------------------------------------------------------------------------------

class reward_station_info_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<0> __has_bits__;

private:

public:
    reward_station_info_req(void);
    reward_station_info_req(const reward_station_info_req& from);
    virtual ~reward_station_info_req(void);

    inline reward_station_info_req& operator=(const reward_station_info_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_info_req* new_instance(void) const;
    virtual reward_station_info_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_info_req& from);
    void merge_from(const reward_station_info_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);
};
// ------------------------------------------------------------------------------------------------

class reward_station_info_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<reward_station_info> info_;

public:
    reward_station_info_ans(void);
    reward_station_info_ans(const reward_station_info_ans& from);
    virtual ~reward_station_info_ans(void);

    inline reward_station_info_ans& operator=(const reward_station_info_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_info_ans* new_instance(void) const;
    virtual reward_station_info_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_info_ans& from);
    void merge_from(const reward_station_info_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // info
    const reward_station_info* get_info(void) const;
    reward_station_info* get_mutable_info(void);
};
// ------------------------------------------------------------------------------------------------

class reward_station_video_ad_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<0> __has_bits__;

private:

public:
    reward_station_video_ad_req(void);
    reward_station_video_ad_req(const reward_station_video_ad_req& from);
    virtual ~reward_station_video_ad_req(void);

    inline reward_station_video_ad_req& operator=(const reward_station_video_ad_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_video_ad_req* new_instance(void) const;
    virtual reward_station_video_ad_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_video_ad_req& from);
    void merge_from(const reward_station_video_ad_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);
};
// ------------------------------------------------------------------------------------------------

class reward_station_video_ad_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int16_t result_;

public:
    reward_station_video_ad_ans(void);
    reward_station_video_ad_ans(const reward_station_video_ad_ans& from);
    virtual ~reward_station_video_ad_ans(void);

    inline reward_station_video_ad_ans& operator=(const reward_station_video_ad_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_video_ad_ans* new_instance(void) const;
    virtual reward_station_video_ad_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_video_ad_ans& from);
    void merge_from(const reward_station_video_ad_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------

class reward_station_video_ad_complete_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<0> __has_bits__;

private:

public:
    reward_station_video_ad_complete_req(void);
    reward_station_video_ad_complete_req(const reward_station_video_ad_complete_req& from);
    virtual ~reward_station_video_ad_complete_req(void);

    inline reward_station_video_ad_complete_req& operator=(const reward_station_video_ad_complete_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_video_ad_complete_req* new_instance(void) const;
    virtual reward_station_video_ad_complete_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_video_ad_complete_req& from);
    void merge_from(const reward_station_video_ad_complete_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);
};
// ------------------------------------------------------------------------------------------------

class reward_station_video_ad_complete_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<asset_info> updated_asset_info_;

public:
    reward_station_video_ad_complete_ans(void);
    reward_station_video_ad_complete_ans(const reward_station_video_ad_complete_ans& from);
    virtual ~reward_station_video_ad_complete_ans(void);

    inline reward_station_video_ad_complete_ans& operator=(const reward_station_video_ad_complete_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_video_ad_complete_ans* new_instance(void) const;
    virtual reward_station_video_ad_complete_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_video_ad_complete_ans& from);
    void merge_from(const reward_station_video_ad_complete_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // updated_asset_info
    const asset_info* get_updated_asset_info(void) const;
    asset_info* get_mutable_updated_asset_info(void);
};
// ------------------------------------------------------------------------------------------------

class reward_station_fb_post_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<0> __has_bits__;

private:

public:
    reward_station_fb_post_req(void);
    reward_station_fb_post_req(const reward_station_fb_post_req& from);
    virtual ~reward_station_fb_post_req(void);

    inline reward_station_fb_post_req& operator=(const reward_station_fb_post_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_fb_post_req* new_instance(void) const;
    virtual reward_station_fb_post_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_fb_post_req& from);
    void merge_from(const reward_station_fb_post_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);
};
// ------------------------------------------------------------------------------------------------

class reward_station_fb_post_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<asset_info> updated_asset_info_;

public:
    reward_station_fb_post_ans(void);
    reward_station_fb_post_ans(const reward_station_fb_post_ans& from);
    virtual ~reward_station_fb_post_ans(void);

    inline reward_station_fb_post_ans& operator=(const reward_station_fb_post_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_fb_post_ans* new_instance(void) const;
    virtual reward_station_fb_post_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_fb_post_ans& from);
    void merge_from(const reward_station_fb_post_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // updated_asset_info
    const asset_info* get_updated_asset_info(void) const;
    asset_info* get_mutable_updated_asset_info(void);
};
// ------------------------------------------------------------------------------------------------

class reward_station_fb_invite_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::uint64_t fb_uuid_;

public:
    reward_station_fb_invite_req(void);
    reward_station_fb_invite_req(const reward_station_fb_invite_req& from);
    virtual ~reward_station_fb_invite_req(void);

    inline reward_station_fb_invite_req& operator=(const reward_station_fb_invite_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_fb_invite_req* new_instance(void) const;
    virtual reward_station_fb_invite_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_fb_invite_req& from);
    void merge_from(const reward_station_fb_invite_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // fb_uuid
    SpringCat::uint64_t get_fb_uuid(void) const;
    void set_fb_uuid(SpringCat::uint64_t value);
};
// ------------------------------------------------------------------------------------------------

class reward_station_fb_invite_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<asset_info> updated_asset_info_;

public:
    reward_station_fb_invite_ans(void);
    reward_station_fb_invite_ans(const reward_station_fb_invite_ans& from);
    virtual ~reward_station_fb_invite_ans(void);

    inline reward_station_fb_invite_ans& operator=(const reward_station_fb_invite_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_fb_invite_ans* new_instance(void) const;
    virtual reward_station_fb_invite_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_fb_invite_ans& from);
    void merge_from(const reward_station_fb_invite_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // updated_asset_info
    const asset_info* get_updated_asset_info(void) const;
    asset_info* get_mutable_updated_asset_info(void);
};
// ------------------------------------------------------------------------------------------------

class reward_station_gold_bonus_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    bool use_dice_;

public:
    reward_station_gold_bonus_req(void);
    reward_station_gold_bonus_req(const reward_station_gold_bonus_req& from);
    virtual ~reward_station_gold_bonus_req(void);

    inline reward_station_gold_bonus_req& operator=(const reward_station_gold_bonus_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_gold_bonus_req* new_instance(void) const;
    virtual reward_station_gold_bonus_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_gold_bonus_req& from);
    void merge_from(const reward_station_gold_bonus_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // use_dice
    bool get_use_dice(void) const;
    void set_use_dice(bool value);
};
// ------------------------------------------------------------------------------------------------

class reward_station_gold_bonus_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::int16_t acquired_gold_;
    std::auto_ptr<asset_info> updated_asset_info_;

public:
    reward_station_gold_bonus_ans(void);
    reward_station_gold_bonus_ans(const reward_station_gold_bonus_ans& from);
    virtual ~reward_station_gold_bonus_ans(void);

    inline reward_station_gold_bonus_ans& operator=(const reward_station_gold_bonus_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_station_gold_bonus_ans* new_instance(void) const;
    virtual reward_station_gold_bonus_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_station_gold_bonus_ans& from);
    void merge_from(const reward_station_gold_bonus_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // acquired_gold
    SpringCat::int16_t get_acquired_gold(void) const;
    void set_acquired_gold(SpringCat::int16_t value);

    // updated_asset_info
    const asset_info* get_updated_asset_info(void) const;
    asset_info* get_mutable_updated_asset_info(void);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_REWARD_STATION_DC_INCLUDE__
