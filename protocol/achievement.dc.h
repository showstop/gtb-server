// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_ACHIEVEMENT_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_ACHIEVEMENT_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "common_def.dc.h"

namespace protocol
{

class achievement_info;
class achievement_list;
class achievement_list_req;
class achievement_list_ans;
class achievement_receive_reward_req;
class achievement_receive_reward_ans;
class achievement_accomplished_notify;

// ================================================================================================

class achievement_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<6> __has_bits__;

private:
    SpringCat::int32_t achievement_id_;
    SpringCat::int32_t record_key_;
    SpringCat::int32_t progress_;
    SpringCat::int32_t goal_;
    bool receive_reward_;
    std::auto_ptr<reward_info> reward_;

public:
    achievement_info(void);
    achievement_info(const achievement_info& from);
    virtual ~achievement_info(void);

    inline achievement_info& operator=(const achievement_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual achievement_info* new_instance(void) const;
    virtual achievement_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const achievement_info& from);
    void merge_from(const achievement_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // achievement_id
    SpringCat::int32_t get_achievement_id(void) const;
    void set_achievement_id(SpringCat::int32_t value);

    // record_key
    record_data_key get_record_key(void) const;
    void set_record_key(record_data_key value);

    // progress
    SpringCat::int32_t get_progress(void) const;
    void set_progress(SpringCat::int32_t value);

    // goal
    SpringCat::int32_t get_goal(void) const;
    void set_goal(SpringCat::int32_t value);

    // receive_reward
    bool get_receive_reward(void) const;
    void set_receive_reward(bool value);

    // reward
    const reward_info* get_reward(void) const;
    reward_info* get_mutable_reward(void);
};
// ------------------------------------------------------------------------------------------------

class achievement_list : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    std::vector<achievement_info*> infos_;

public:
    achievement_list(void);
    achievement_list(const achievement_list& from);
    virtual ~achievement_list(void);

    inline achievement_list& operator=(const achievement_list& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual achievement_list* new_instance(void) const;
    virtual achievement_list* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const achievement_list& from);
    void merge_from(const achievement_list& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // infos
    const std::vector<achievement_info*>& get_infos(void) const;
    std::vector<achievement_info*>* get_mutable_infos(void);
    const achievement_info* get_infos(size_t index) const;
    achievement_info* get_mutable_infos(size_t index);
    achievement_info* add_infos(void);
};
// ------------------------------------------------------------------------------------------------

class achievement_list_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<0> __has_bits__;

private:

public:
    achievement_list_req(void);
    achievement_list_req(const achievement_list_req& from);
    virtual ~achievement_list_req(void);

    inline achievement_list_req& operator=(const achievement_list_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual achievement_list_req* new_instance(void) const;
    virtual achievement_list_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const achievement_list_req& from);
    void merge_from(const achievement_list_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);
};
// ------------------------------------------------------------------------------------------------

class achievement_list_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<achievement_list> infos_;

public:
    achievement_list_ans(void);
    achievement_list_ans(const achievement_list_ans& from);
    virtual ~achievement_list_ans(void);

    inline achievement_list_ans& operator=(const achievement_list_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual achievement_list_ans* new_instance(void) const;
    virtual achievement_list_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const achievement_list_ans& from);
    void merge_from(const achievement_list_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // infos
    const achievement_list* get_infos(void) const;
    achievement_list* get_mutable_infos(void);
};
// ------------------------------------------------------------------------------------------------

class achievement_receive_reward_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t achievement_id_;

public:
    achievement_receive_reward_req(void);
    achievement_receive_reward_req(const achievement_receive_reward_req& from);
    virtual ~achievement_receive_reward_req(void);

    inline achievement_receive_reward_req& operator=(const achievement_receive_reward_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual achievement_receive_reward_req* new_instance(void) const;
    virtual achievement_receive_reward_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const achievement_receive_reward_req& from);
    void merge_from(const achievement_receive_reward_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // achievement_id
    SpringCat::int32_t get_achievement_id(void) const;
    void set_achievement_id(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class achievement_receive_reward_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<reward_info> reward_;
    std::auto_ptr<achievement_info> updated_info_;

public:
    achievement_receive_reward_ans(void);
    achievement_receive_reward_ans(const achievement_receive_reward_ans& from);
    virtual ~achievement_receive_reward_ans(void);

    inline achievement_receive_reward_ans& operator=(const achievement_receive_reward_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual achievement_receive_reward_ans* new_instance(void) const;
    virtual achievement_receive_reward_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const achievement_receive_reward_ans& from);
    void merge_from(const achievement_receive_reward_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // reward
    const reward_info* get_reward(void) const;
    reward_info* get_mutable_reward(void);

    // updated_info
    const achievement_info* get_updated_info(void) const;
    achievement_info* get_mutable_updated_info(void);
};
// ------------------------------------------------------------------------------------------------

class achievement_accomplished_notify : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t achievement_id_;

public:
    achievement_accomplished_notify(void);
    achievement_accomplished_notify(const achievement_accomplished_notify& from);
    virtual ~achievement_accomplished_notify(void);

    inline achievement_accomplished_notify& operator=(const achievement_accomplished_notify& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual achievement_accomplished_notify* new_instance(void) const;
    virtual achievement_accomplished_notify* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const achievement_accomplished_notify& from);
    void merge_from(const achievement_accomplished_notify& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // achievement_id
    SpringCat::int32_t get_achievement_id(void) const;
    void set_achievement_id(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_ACHIEVEMENT_DC_INCLUDE__
