// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_LOBBY_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_LOBBY_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "common_def.dc.h"
#include "player.dc.h"
#include "vehicle.dc.h"
#include "ability.dc.h"

namespace protocol
{

class connect_lobby_req;
class connect_lobby_ans;
class tutorial_progress_update_req;
class tutorial_progress_update_ans;
class first_vehicle_select_req;
class first_vehicle_select_ans;
class asset_info_req;
class asset_info_ans;
class match_item_buy_req;
class match_item_buy_ans;
class match_info_req;
class match_info_ans;
class match_start_req;
class match_start_ans;
class match_stop_req;
class match_stop_ans;
class match_complete_notify;

// ================================================================================================

class connect_lobby_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t session_id_;

public:
    connect_lobby_req(void);
    connect_lobby_req(const connect_lobby_req& from);
    virtual ~connect_lobby_req(void);

    inline connect_lobby_req& operator=(const connect_lobby_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual connect_lobby_req* new_instance(void) const;
    virtual connect_lobby_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const connect_lobby_req& from);
    void merge_from(const connect_lobby_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // session_id
    SpringCat::int32_t get_session_id(void) const;
    void set_session_id(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class connect_lobby_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::uint64_t player_no_;

public:
    connect_lobby_ans(void);
    connect_lobby_ans(const connect_lobby_ans& from);
    virtual ~connect_lobby_ans(void);

    inline connect_lobby_ans& operator=(const connect_lobby_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual connect_lobby_ans* new_instance(void) const;
    virtual connect_lobby_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const connect_lobby_ans& from);
    void merge_from(const connect_lobby_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);
};
// ------------------------------------------------------------------------------------------------

class tutorial_progress_update_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t progress_;

public:
    tutorial_progress_update_req(void);
    tutorial_progress_update_req(const tutorial_progress_update_req& from);
    virtual ~tutorial_progress_update_req(void);

    inline tutorial_progress_update_req& operator=(const tutorial_progress_update_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual tutorial_progress_update_req* new_instance(void) const;
    virtual tutorial_progress_update_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const tutorial_progress_update_req& from);
    void merge_from(const tutorial_progress_update_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // progress
    TutorialProgress get_progress(void) const;
    void set_progress(TutorialProgress value);
};
// ------------------------------------------------------------------------------------------------

class tutorial_progress_update_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::int32_t progress_;

public:
    tutorial_progress_update_ans(void);
    tutorial_progress_update_ans(const tutorial_progress_update_ans& from);
    virtual ~tutorial_progress_update_ans(void);

    inline tutorial_progress_update_ans& operator=(const tutorial_progress_update_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual tutorial_progress_update_ans* new_instance(void) const;
    virtual tutorial_progress_update_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const tutorial_progress_update_ans& from);
    void merge_from(const tutorial_progress_update_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // progress
    TutorialProgress get_progress(void) const;
    void set_progress(TutorialProgress value);
};
// ------------------------------------------------------------------------------------------------

class first_vehicle_select_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t selected_vehicle_no_;

public:
    first_vehicle_select_req(void);
    first_vehicle_select_req(const first_vehicle_select_req& from);
    virtual ~first_vehicle_select_req(void);

    inline first_vehicle_select_req& operator=(const first_vehicle_select_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual first_vehicle_select_req* new_instance(void) const;
    virtual first_vehicle_select_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const first_vehicle_select_req& from);
    void merge_from(const first_vehicle_select_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // selected_vehicle_no
    SpringCat::int32_t get_selected_vehicle_no(void) const;
    void set_selected_vehicle_no(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class first_vehicle_select_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<vehicle> selected_vehicle_;

public:
    first_vehicle_select_ans(void);
    first_vehicle_select_ans(const first_vehicle_select_ans& from);
    virtual ~first_vehicle_select_ans(void);

    inline first_vehicle_select_ans& operator=(const first_vehicle_select_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual first_vehicle_select_ans* new_instance(void) const;
    virtual first_vehicle_select_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const first_vehicle_select_ans& from);
    void merge_from(const first_vehicle_select_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // selected_vehicle
    const vehicle* get_selected_vehicle(void) const;
    vehicle* get_mutable_selected_vehicle(void);
};
// ------------------------------------------------------------------------------------------------

class asset_info_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::uint64_t player_no_;

public:
    asset_info_req(void);
    asset_info_req(const asset_info_req& from);
    virtual ~asset_info_req(void);

    inline asset_info_req& operator=(const asset_info_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual asset_info_req* new_instance(void) const;
    virtual asset_info_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const asset_info_req& from);
    void merge_from(const asset_info_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);
};
// ------------------------------------------------------------------------------------------------

class asset_info_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<asset_info> info_;

public:
    asset_info_ans(void);
    asset_info_ans(const asset_info_ans& from);
    virtual ~asset_info_ans(void);

    inline asset_info_ans& operator=(const asset_info_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual asset_info_ans* new_instance(void) const;
    virtual asset_info_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const asset_info_ans& from);
    void merge_from(const asset_info_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // info
    const asset_info* get_info(void) const;
    asset_info* get_mutable_info(void);
};
// ------------------------------------------------------------------------------------------------

class match_item_buy_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t item_id_;

public:
    match_item_buy_req(void);
    match_item_buy_req(const match_item_buy_req& from);
    virtual ~match_item_buy_req(void);

    inline match_item_buy_req& operator=(const match_item_buy_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual match_item_buy_req* new_instance(void) const;
    virtual match_item_buy_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const match_item_buy_req& from);
    void merge_from(const match_item_buy_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // item_id
    SpringCat::int32_t get_item_id(void) const;
    void set_item_id(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class match_item_buy_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<match_item_info> updated_match_items_;
    std::auto_ptr<asset_info> updated_asset_info_;

public:
    match_item_buy_ans(void);
    match_item_buy_ans(const match_item_buy_ans& from);
    virtual ~match_item_buy_ans(void);

    inline match_item_buy_ans& operator=(const match_item_buy_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual match_item_buy_ans* new_instance(void) const;
    virtual match_item_buy_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const match_item_buy_ans& from);
    void merge_from(const match_item_buy_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // updated_match_items
    const match_item_info* get_updated_match_items(void) const;
    match_item_info* get_mutable_updated_match_items(void);

    // updated_asset_info
    const asset_info* get_updated_asset_info(void) const;
    asset_info* get_mutable_updated_asset_info(void);
};
// ------------------------------------------------------------------------------------------------

class match_info_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t mode_;

public:
    match_info_req(void);
    match_info_req(const match_info_req& from);
    virtual ~match_info_req(void);

    inline match_info_req& operator=(const match_info_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual match_info_req* new_instance(void) const;
    virtual match_info_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const match_info_req& from);
    void merge_from(const match_info_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // mode
    GameMode get_mode(void) const;
    void set_mode(GameMode value);
};
// ------------------------------------------------------------------------------------------------

class match_info_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<4> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::vector<vehicle*> available_;
    std::vector<vehicle*> restricted_;
    std::auto_ptr<match_item_info> match_items_;

public:
    match_info_ans(void);
    match_info_ans(const match_info_ans& from);
    virtual ~match_info_ans(void);

    inline match_info_ans& operator=(const match_info_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual match_info_ans* new_instance(void) const;
    virtual match_info_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const match_info_ans& from);
    void merge_from(const match_info_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // available
    const std::vector<vehicle*>& get_available(void) const;
    std::vector<vehicle*>* get_mutable_available(void);
    const vehicle* get_available(size_t index) const;
    vehicle* get_mutable_available(size_t index);
    vehicle* add_available(void);

    // restricted
    const std::vector<vehicle*>& get_restricted(void) const;
    std::vector<vehicle*>* get_mutable_restricted(void);
    const vehicle* get_restricted(size_t index) const;
    vehicle* get_mutable_restricted(size_t index);
    vehicle* add_restricted(void);

    // match_items
    const match_item_info* get_match_items(void) const;
    match_item_info* get_mutable_match_items(void);
};
// ------------------------------------------------------------------------------------------------

class match_start_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int32_t mode_;
    std::auto_ptr<match_item_info> using_match_items_;

public:
    match_start_req(void);
    match_start_req(const match_start_req& from);
    virtual ~match_start_req(void);

    inline match_start_req& operator=(const match_start_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual match_start_req* new_instance(void) const;
    virtual match_start_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const match_start_req& from);
    void merge_from(const match_start_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // mode
    GameMode get_mode(void) const;
    void set_mode(GameMode value);

    // using_match_items
    const match_item_info* get_using_match_items(void) const;
    match_item_info* get_mutable_using_match_items(void);
};
// ------------------------------------------------------------------------------------------------

class match_start_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::int32_t estimated_sec_;

public:
    match_start_ans(void);
    match_start_ans(const match_start_ans& from);
    virtual ~match_start_ans(void);

    inline match_start_ans& operator=(const match_start_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual match_start_ans* new_instance(void) const;
    virtual match_start_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const match_start_ans& from);
    void merge_from(const match_start_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // estimated_sec
    SpringCat::int32_t get_estimated_sec(void) const;
    void set_estimated_sec(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class match_stop_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t mode_;

public:
    match_stop_req(void);
    match_stop_req(const match_stop_req& from);
    virtual ~match_stop_req(void);

    inline match_stop_req& operator=(const match_stop_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual match_stop_req* new_instance(void) const;
    virtual match_stop_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const match_stop_req& from);
    void merge_from(const match_stop_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // mode
    GameMode get_mode(void) const;
    void set_mode(GameMode value);
};
// ------------------------------------------------------------------------------------------------

class match_stop_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int16_t result_;

public:
    match_stop_ans(void);
    match_stop_ans(const match_stop_ans& from);
    virtual ~match_stop_ans(void);

    inline match_stop_ans& operator=(const match_stop_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual match_stop_ans* new_instance(void) const;
    virtual match_stop_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const match_stop_ans& from);
    void merge_from(const match_stop_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------

class match_complete_notify : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<9> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::int32_t mode_;
    SpringCat::int32_t map_no_;
    bool use_standalone_;
    std::auto_ptr<server_address> ps_addr_;
    std::map<SpringCat::uint64_t, player_profile_info*> profiles_;
    std::map<SpringCat::uint64_t, vehicle*> vehicles_;
    std::map<SpringCat::uint64_t, ability_slot*> equipped_ability_;
    std::map<SpringCat::uint64_t, ability_list*> abilities_;

public:
    match_complete_notify(void);
    match_complete_notify(const match_complete_notify& from);
    virtual ~match_complete_notify(void);

    inline match_complete_notify& operator=(const match_complete_notify& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual match_complete_notify* new_instance(void) const;
    virtual match_complete_notify* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const match_complete_notify& from);
    void merge_from(const match_complete_notify& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // mode
    GameMode get_mode(void) const;
    void set_mode(GameMode value);

    // map_no
    SpringCat::int32_t get_map_no(void) const;
    void set_map_no(SpringCat::int32_t value);

    // use_standalone
    bool get_use_standalone(void) const;
    void set_use_standalone(bool value);

    // ps_addr
    const server_address* get_ps_addr(void) const;
    server_address* get_mutable_ps_addr(void);

    // profiles
    const std::map<SpringCat::uint64_t, player_profile_info*>& get_profiles(void) const;
    std::map<SpringCat::uint64_t, player_profile_info*>* get_mutable_profiles(void);
    const player_profile_info* get_profiles(SpringCat::uint64_t key) const;
    player_profile_info* get_mutable_profiles(SpringCat::uint64_t key);
    player_profile_info* insert_profiles(SpringCat::uint64_t key);

    // vehicles
    const std::map<SpringCat::uint64_t, vehicle*>& get_vehicles(void) const;
    std::map<SpringCat::uint64_t, vehicle*>* get_mutable_vehicles(void);
    const vehicle* get_vehicles(SpringCat::uint64_t key) const;
    vehicle* get_mutable_vehicles(SpringCat::uint64_t key);
    vehicle* insert_vehicles(SpringCat::uint64_t key);

    // equipped_ability
    const std::map<SpringCat::uint64_t, ability_slot*>& get_equipped_ability(void) const;
    std::map<SpringCat::uint64_t, ability_slot*>* get_mutable_equipped_ability(void);
    const ability_slot* get_equipped_ability(SpringCat::uint64_t key) const;
    ability_slot* get_mutable_equipped_ability(SpringCat::uint64_t key);
    ability_slot* insert_equipped_ability(SpringCat::uint64_t key);

    // abilities
    const std::map<SpringCat::uint64_t, ability_list*>& get_abilities(void) const;
    std::map<SpringCat::uint64_t, ability_list*>* get_mutable_abilities(void);
    const ability_list* get_abilities(SpringCat::uint64_t key) const;
    ability_list* get_mutable_abilities(SpringCat::uint64_t key);
    ability_list* insert_abilities(SpringCat::uint64_t key);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_LOBBY_DC_INCLUDE__
