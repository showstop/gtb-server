// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_PLAYER_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_PLAYER_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "common_def.dc.h"

namespace protocol
{

class player_profile_info;
class player_record_info;
class player_profile_info_req;
class player_profile_info_ans;
class update_player_profile_info_req;
class update_player_profile_info_ans;

enum PlayerState
{
    PlayerState_OFFLINE = 0,
    PlayerState_IN_LOBBY = 1,
    PlayerState_IN_SEARCHING = 2,
    PlayerState_IN_PLAYING = 3,
};    // enum PlayerState

// ================================================================================================

class player_profile_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<8> __has_bits__;

private:
    SpringCat::uint64_t player_no_;
    std::string game_nick_;
    SpringCat::int16_t nation_code_;
    SpringCat::uint16_t player_level_;
    SpringCat::int32_t exp_;
    SpringCat::int16_t exp_gauge_;
    SpringCat::int32_t trophy_;
    std::string options_;

public:
    player_profile_info(void);
    player_profile_info(const player_profile_info& from);
    virtual ~player_profile_info(void);

    inline player_profile_info& operator=(const player_profile_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual player_profile_info* new_instance(void) const;
    virtual player_profile_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const player_profile_info& from);
    void merge_from(const player_profile_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);

    // game_nick
    const std::string& get_game_nick(void) const;
    std::string* get_mutable_game_nick(void);
    void set_game_nick(const std::string& value);
    void set_game_nick(const char* value);

    // nation_code
    SpringCat::int16_t get_nation_code(void) const;
    void set_nation_code(SpringCat::int16_t value);

    // player_level
    SpringCat::uint16_t get_player_level(void) const;
    void set_player_level(SpringCat::uint16_t value);

    // exp
    SpringCat::int32_t get_exp(void) const;
    void set_exp(SpringCat::int32_t value);

    // exp_gauge
    SpringCat::int16_t get_exp_gauge(void) const;
    void set_exp_gauge(SpringCat::int16_t value);

    // trophy
    SpringCat::int32_t get_trophy(void) const;
    void set_trophy(SpringCat::int32_t value);

    // options
    const std::string& get_options(void) const;
    std::string* get_mutable_options(void);
    void set_options(const std::string& value);
    void set_options(const char* value);
};
// ------------------------------------------------------------------------------------------------

class player_record_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<0> __has_bits__;

private:

public:
    player_record_info(void);
    player_record_info(const player_record_info& from);
    virtual ~player_record_info(void);

    inline player_record_info& operator=(const player_record_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual player_record_info* new_instance(void) const;
    virtual player_record_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const player_record_info& from);
    void merge_from(const player_record_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);
};
// ------------------------------------------------------------------------------------------------

class player_profile_info_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::uint64_t player_no_;

public:
    player_profile_info_req(void);
    player_profile_info_req(const player_profile_info_req& from);
    virtual ~player_profile_info_req(void);

    inline player_profile_info_req& operator=(const player_profile_info_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual player_profile_info_req* new_instance(void) const;
    virtual player_profile_info_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const player_profile_info_req& from);
    void merge_from(const player_profile_info_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);
};
// ------------------------------------------------------------------------------------------------

class player_profile_info_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<player_profile_info> info_;

public:
    player_profile_info_ans(void);
    player_profile_info_ans(const player_profile_info_ans& from);
    virtual ~player_profile_info_ans(void);

    inline player_profile_info_ans& operator=(const player_profile_info_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual player_profile_info_ans* new_instance(void) const;
    virtual player_profile_info_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const player_profile_info_ans& from);
    void merge_from(const player_profile_info_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // info
    const player_profile_info* get_info(void) const;
    player_profile_info* get_mutable_info(void);
};
// ------------------------------------------------------------------------------------------------

class update_player_profile_info_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    std::string game_nick_;
    SpringCat::int16_t nation_code_;

public:
    update_player_profile_info_req(void);
    update_player_profile_info_req(const update_player_profile_info_req& from);
    virtual ~update_player_profile_info_req(void);

    inline update_player_profile_info_req& operator=(const update_player_profile_info_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual update_player_profile_info_req* new_instance(void) const;
    virtual update_player_profile_info_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const update_player_profile_info_req& from);
    void merge_from(const update_player_profile_info_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // game_nick
    const std::string& get_game_nick(void) const;
    std::string* get_mutable_game_nick(void);
    void set_game_nick(const std::string& value);
    void set_game_nick(const char* value);

    // nation_code
    SpringCat::int16_t get_nation_code(void) const;
    void set_nation_code(SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------

class update_player_profile_info_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<player_profile_info> info_;

public:
    update_player_profile_info_ans(void);
    update_player_profile_info_ans(const update_player_profile_info_ans& from);
    virtual ~update_player_profile_info_ans(void);

    inline update_player_profile_info_ans& operator=(const update_player_profile_info_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual update_player_profile_info_ans* new_instance(void) const;
    virtual update_player_profile_info_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const update_player_profile_info_ans& from);
    void merge_from(const update_player_profile_info_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // info
    const player_profile_info* get_info(void) const;
    player_profile_info* get_mutable_info(void);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_PLAYER_DC_INCLUDE__
