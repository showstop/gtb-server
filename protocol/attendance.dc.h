// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_ATTENDANCE_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_ATTENDANCE_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "common_def.dc.h"

namespace protocol
{

class attendance_info;
class attendance_list;
class attendance_list_req;
class attendance_list_ans;
class attendance_receive_reward_req;
class attendance_receive_reward_ans;
class attendance_monthly_reward_req;
class attendance_monthly_reward_ans;

// ================================================================================================

class attendance_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<4> __has_bits__;

private:
    SpringCat::int32_t day_seq_;
    std::auto_ptr<reward_info> reward_;
    bool receive_reward_;
    bool complete_;

public:
    attendance_info(void);
    attendance_info(const attendance_info& from);
    virtual ~attendance_info(void);

    inline attendance_info& operator=(const attendance_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual attendance_info* new_instance(void) const;
    virtual attendance_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const attendance_info& from);
    void merge_from(const attendance_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // day_seq
    SpringCat::int32_t get_day_seq(void) const;
    void set_day_seq(SpringCat::int32_t value);

    // reward
    const reward_info* get_reward(void) const;
    reward_info* get_mutable_reward(void);

    // receive_reward
    bool get_receive_reward(void) const;
    void set_receive_reward(bool value);

    // complete
    bool get_complete(void) const;
    void set_complete(bool value);
};
// ------------------------------------------------------------------------------------------------

class attendance_list : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    std::vector<attendance_info*> infos_;

public:
    attendance_list(void);
    attendance_list(const attendance_list& from);
    virtual ~attendance_list(void);

    inline attendance_list& operator=(const attendance_list& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual attendance_list* new_instance(void) const;
    virtual attendance_list* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const attendance_list& from);
    void merge_from(const attendance_list& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // infos
    const std::vector<attendance_info*>& get_infos(void) const;
    std::vector<attendance_info*>* get_mutable_infos(void);
    const attendance_info* get_infos(size_t index) const;
    attendance_info* get_mutable_infos(size_t index);
    attendance_info* add_infos(void);
};
// ------------------------------------------------------------------------------------------------

class attendance_list_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<0> __has_bits__;

private:

public:
    attendance_list_req(void);
    attendance_list_req(const attendance_list_req& from);
    virtual ~attendance_list_req(void);

    inline attendance_list_req& operator=(const attendance_list_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual attendance_list_req* new_instance(void) const;
    virtual attendance_list_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const attendance_list_req& from);
    void merge_from(const attendance_list_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);
};
// ------------------------------------------------------------------------------------------------

class attendance_list_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<attendance_list> infos_;

public:
    attendance_list_ans(void);
    attendance_list_ans(const attendance_list_ans& from);
    virtual ~attendance_list_ans(void);

    inline attendance_list_ans& operator=(const attendance_list_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual attendance_list_ans* new_instance(void) const;
    virtual attendance_list_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const attendance_list_ans& from);
    void merge_from(const attendance_list_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // infos
    const attendance_list* get_infos(void) const;
    attendance_list* get_mutable_infos(void);
};
// ------------------------------------------------------------------------------------------------

class attendance_receive_reward_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t day_seq_;

public:
    attendance_receive_reward_req(void);
    attendance_receive_reward_req(const attendance_receive_reward_req& from);
    virtual ~attendance_receive_reward_req(void);

    inline attendance_receive_reward_req& operator=(const attendance_receive_reward_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual attendance_receive_reward_req* new_instance(void) const;
    virtual attendance_receive_reward_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const attendance_receive_reward_req& from);
    void merge_from(const attendance_receive_reward_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // day_seq
    SpringCat::int32_t get_day_seq(void) const;
    void set_day_seq(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class attendance_receive_reward_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<reward_info> reward_;

public:
    attendance_receive_reward_ans(void);
    attendance_receive_reward_ans(const attendance_receive_reward_ans& from);
    virtual ~attendance_receive_reward_ans(void);

    inline attendance_receive_reward_ans& operator=(const attendance_receive_reward_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual attendance_receive_reward_ans* new_instance(void) const;
    virtual attendance_receive_reward_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const attendance_receive_reward_ans& from);
    void merge_from(const attendance_receive_reward_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // reward
    const reward_info* get_reward(void) const;
    reward_info* get_mutable_reward(void);
};
// ------------------------------------------------------------------------------------------------

class attendance_monthly_reward_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<0> __has_bits__;

private:

public:
    attendance_monthly_reward_req(void);
    attendance_monthly_reward_req(const attendance_monthly_reward_req& from);
    virtual ~attendance_monthly_reward_req(void);

    inline attendance_monthly_reward_req& operator=(const attendance_monthly_reward_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual attendance_monthly_reward_req* new_instance(void) const;
    virtual attendance_monthly_reward_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const attendance_monthly_reward_req& from);
    void merge_from(const attendance_monthly_reward_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);
};
// ------------------------------------------------------------------------------------------------

class attendance_monthly_reward_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::vector<reward_info*> rewards_;

public:
    attendance_monthly_reward_ans(void);
    attendance_monthly_reward_ans(const attendance_monthly_reward_ans& from);
    virtual ~attendance_monthly_reward_ans(void);

    inline attendance_monthly_reward_ans& operator=(const attendance_monthly_reward_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual attendance_monthly_reward_ans* new_instance(void) const;
    virtual attendance_monthly_reward_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const attendance_monthly_reward_ans& from);
    void merge_from(const attendance_monthly_reward_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // rewards
    const std::vector<reward_info*>& get_rewards(void) const;
    std::vector<reward_info*>* get_mutable_rewards(void);
    const reward_info* get_rewards(size_t index) const;
    reward_info* get_mutable_rewards(size_t index);
    reward_info* add_rewards(void);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_ATTENDANCE_DC_INCLUDE__
