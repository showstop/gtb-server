// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_VEHICLE_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_VEHICLE_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "common_def.dc.h"

namespace protocol
{

class vehicle_stat;
class vehicle_stuff;
class vehicle_skill;
class vehicle_parts;
class vehicle;
class vehicle_list;
class vehicle_list_req;
class vehicle_list_ans;
class vehicle_select_req;
class vehicle_select_ans;
class vehicle_upgrade_req;
class vehicle_upgrade_ans;
class vehicle_parts_tuning_req;
class vehicle_parts_tuning_ans;

enum vehicle_level
{
    vehicle_level_LOCKED = 0,
    vehicle_level_D_CLASS = 1,
    vehicle_level_C_CLASS = 2,
    vehicle_level_B_CLASS = 3,
    vehicle_level_A_CLASS = 4,
    vehicle_level_S_CLASS = 5,
};    // enum vehicle_level

enum vehicle_parts_id
{
    vehicle_parts_id_BATTERY = 1,
    vehicle_parts_id_BODY_KIT = 2,
    vehicle_parts_id_MOTOR = 3,
    vehicle_parts_id_SUSPENSION = 4,
};    // enum vehicle_parts_id

// ================================================================================================

class vehicle_stat : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<4> __has_bits__;

private:
    SpringCat::int16_t spd_;
    SpringCat::int16_t pow_;
    SpringCat::int16_t acc_;
    SpringCat::int16_t hp_;

public:
    vehicle_stat(void);
    vehicle_stat(const vehicle_stat& from);
    virtual ~vehicle_stat(void);

    inline vehicle_stat& operator=(const vehicle_stat& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_stat* new_instance(void) const;
    virtual vehicle_stat* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_stat& from);
    void merge_from(const vehicle_stat& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // spd
    SpringCat::int16_t get_spd(void) const;
    void set_spd(SpringCat::int16_t value);

    // pow
    SpringCat::int16_t get_pow(void) const;
    void set_pow(SpringCat::int16_t value);

    // acc
    SpringCat::int16_t get_acc(void) const;
    void set_acc(SpringCat::int16_t value);

    // hp
    SpringCat::int16_t get_hp(void) const;
    void set_hp(SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------

class vehicle_stuff : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    std::map<SpringCat::int32_t, SpringCat::int32_t> stuff_info_;

public:
    vehicle_stuff(void);
    vehicle_stuff(const vehicle_stuff& from);
    virtual ~vehicle_stuff(void);

    inline vehicle_stuff& operator=(const vehicle_stuff& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_stuff* new_instance(void) const;
    virtual vehicle_stuff* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_stuff& from);
    void merge_from(const vehicle_stuff& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // stuff_info
    const std::map<SpringCat::int32_t, SpringCat::int32_t>& get_stuff_info(void) const;
    std::map<SpringCat::int32_t, SpringCat::int32_t>* get_mutable_stuff_info(void);
    bool get_stuff_info(SpringCat::int32_t key, SpringCat::int32_t* value) const;
    void set_stuff_info(SpringCat::int32_t key, SpringCat::int32_t value);
    bool insert_stuff_info(SpringCat::int32_t key, SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class vehicle_skill : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int32_t skill_id_;
    SpringCat::int16_t skill_lv_;

public:
    vehicle_skill(void);
    vehicle_skill(const vehicle_skill& from);
    virtual ~vehicle_skill(void);

    inline vehicle_skill& operator=(const vehicle_skill& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_skill* new_instance(void) const;
    virtual vehicle_skill* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_skill& from);
    void merge_from(const vehicle_skill& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // skill_id
    SpringCat::int32_t get_skill_id(void) const;
    void set_skill_id(SpringCat::int32_t value);

    // skill_lv
    SpringCat::int16_t get_skill_lv(void) const;
    void set_skill_lv(SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------

class vehicle_parts : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<4> __has_bits__;

private:
    SpringCat::int32_t parts_id_;
    SpringCat::int16_t level_;
    SpringCat::int16_t exp_;
    std::map<SpringCat::int32_t, SpringCat::int16_t> need_stuffs_;

public:
    vehicle_parts(void);
    vehicle_parts(const vehicle_parts& from);
    virtual ~vehicle_parts(void);

    inline vehicle_parts& operator=(const vehicle_parts& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_parts* new_instance(void) const;
    virtual vehicle_parts* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_parts& from);
    void merge_from(const vehicle_parts& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // parts_id
    vehicle_parts_id get_parts_id(void) const;
    void set_parts_id(vehicle_parts_id value);

    // level
    SpringCat::int16_t get_level(void) const;
    void set_level(SpringCat::int16_t value);

    // exp
    SpringCat::int16_t get_exp(void) const;
    void set_exp(SpringCat::int16_t value);

    // need_stuffs
    const std::map<SpringCat::int32_t, SpringCat::int16_t>& get_need_stuffs(void) const;
    std::map<SpringCat::int32_t, SpringCat::int16_t>* get_mutable_need_stuffs(void);
    bool get_need_stuffs(SpringCat::int32_t key, SpringCat::int16_t* value) const;
    void set_need_stuffs(SpringCat::int32_t key, SpringCat::int16_t value);
    bool insert_need_stuffs(SpringCat::int32_t key, SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------

class vehicle : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<6> __has_bits__;

private:
    SpringCat::int32_t vehicle_no_;
    SpringCat::int32_t level_;
    SpringCat::int16_t hold_card_;
    std::vector<vehicle_skill*> skills_;
    std::vector<vehicle_parts*> parts_;
    std::auto_ptr<vehicle_stat> stat_;

public:
    vehicle(void);
    vehicle(const vehicle& from);
    virtual ~vehicle(void);

    inline vehicle& operator=(const vehicle& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle* new_instance(void) const;
    virtual vehicle* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle& from);
    void merge_from(const vehicle& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // vehicle_no
    SpringCat::int32_t get_vehicle_no(void) const;
    void set_vehicle_no(SpringCat::int32_t value);

    // level
    vehicle_level get_level(void) const;
    void set_level(vehicle_level value);

    // hold_card
    SpringCat::int16_t get_hold_card(void) const;
    void set_hold_card(SpringCat::int16_t value);

    // skills
    const std::vector<vehicle_skill*>& get_skills(void) const;
    std::vector<vehicle_skill*>* get_mutable_skills(void);
    const vehicle_skill* get_skills(size_t index) const;
    vehicle_skill* get_mutable_skills(size_t index);
    vehicle_skill* add_skills(void);

    // parts
    const std::vector<vehicle_parts*>& get_parts(void) const;
    std::vector<vehicle_parts*>* get_mutable_parts(void);
    const vehicle_parts* get_parts(size_t index) const;
    vehicle_parts* get_mutable_parts(size_t index);
    vehicle_parts* add_parts(void);

    // stat
    const vehicle_stat* get_stat(void) const;
    vehicle_stat* get_mutable_stat(void);
};
// ------------------------------------------------------------------------------------------------

class vehicle_list : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    std::vector<vehicle*> infos_;

public:
    vehicle_list(void);
    vehicle_list(const vehicle_list& from);
    virtual ~vehicle_list(void);

    inline vehicle_list& operator=(const vehicle_list& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_list* new_instance(void) const;
    virtual vehicle_list* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_list& from);
    void merge_from(const vehicle_list& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // infos
    const std::vector<vehicle*>& get_infos(void) const;
    std::vector<vehicle*>* get_mutable_infos(void);
    const vehicle* get_infos(size_t index) const;
    vehicle* get_mutable_infos(size_t index);
    vehicle* add_infos(void);
};
// ------------------------------------------------------------------------------------------------

class vehicle_list_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::uint64_t player_no_;

public:
    vehicle_list_req(void);
    vehicle_list_req(const vehicle_list_req& from);
    virtual ~vehicle_list_req(void);

    inline vehicle_list_req& operator=(const vehicle_list_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_list_req* new_instance(void) const;
    virtual vehicle_list_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_list_req& from);
    void merge_from(const vehicle_list_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);
};
// ------------------------------------------------------------------------------------------------

class vehicle_list_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<4> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<vehicle_list> infos_;
    SpringCat::int32_t selected_vehicle_no_;
    std::auto_ptr<vehicle_stuff> stuffs_;

public:
    vehicle_list_ans(void);
    vehicle_list_ans(const vehicle_list_ans& from);
    virtual ~vehicle_list_ans(void);

    inline vehicle_list_ans& operator=(const vehicle_list_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_list_ans* new_instance(void) const;
    virtual vehicle_list_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_list_ans& from);
    void merge_from(const vehicle_list_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // infos
    const vehicle_list* get_infos(void) const;
    vehicle_list* get_mutable_infos(void);

    // selected_vehicle_no
    SpringCat::int32_t get_selected_vehicle_no(void) const;
    void set_selected_vehicle_no(SpringCat::int32_t value);

    // stuffs
    const vehicle_stuff* get_stuffs(void) const;
    vehicle_stuff* get_mutable_stuffs(void);
};
// ------------------------------------------------------------------------------------------------

class vehicle_select_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t vehicle_no_;

public:
    vehicle_select_req(void);
    vehicle_select_req(const vehicle_select_req& from);
    virtual ~vehicle_select_req(void);

    inline vehicle_select_req& operator=(const vehicle_select_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_select_req* new_instance(void) const;
    virtual vehicle_select_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_select_req& from);
    void merge_from(const vehicle_select_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // vehicle_no
    SpringCat::int32_t get_vehicle_no(void) const;
    void set_vehicle_no(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class vehicle_select_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::int32_t selected_vehicle_no_;

public:
    vehicle_select_ans(void);
    vehicle_select_ans(const vehicle_select_ans& from);
    virtual ~vehicle_select_ans(void);

    inline vehicle_select_ans& operator=(const vehicle_select_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_select_ans* new_instance(void) const;
    virtual vehicle_select_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_select_ans& from);
    void merge_from(const vehicle_select_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // selected_vehicle_no
    SpringCat::int32_t get_selected_vehicle_no(void) const;
    void set_selected_vehicle_no(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class vehicle_upgrade_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t vehicle_no_;

public:
    vehicle_upgrade_req(void);
    vehicle_upgrade_req(const vehicle_upgrade_req& from);
    virtual ~vehicle_upgrade_req(void);

    inline vehicle_upgrade_req& operator=(const vehicle_upgrade_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_upgrade_req* new_instance(void) const;
    virtual vehicle_upgrade_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_upgrade_req& from);
    void merge_from(const vehicle_upgrade_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // vehicle_no
    SpringCat::int32_t get_vehicle_no(void) const;
    void set_vehicle_no(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class vehicle_upgrade_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<vehicle> updated_vehicle_;

public:
    vehicle_upgrade_ans(void);
    vehicle_upgrade_ans(const vehicle_upgrade_ans& from);
    virtual ~vehicle_upgrade_ans(void);

    inline vehicle_upgrade_ans& operator=(const vehicle_upgrade_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_upgrade_ans* new_instance(void) const;
    virtual vehicle_upgrade_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_upgrade_ans& from);
    void merge_from(const vehicle_upgrade_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // updated_vehicle
    const vehicle* get_updated_vehicle(void) const;
    vehicle* get_mutable_updated_vehicle(void);
};
// ------------------------------------------------------------------------------------------------

class vehicle_parts_tuning_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int32_t vehicle_no_;
    SpringCat::int32_t parts_id_;

public:
    vehicle_parts_tuning_req(void);
    vehicle_parts_tuning_req(const vehicle_parts_tuning_req& from);
    virtual ~vehicle_parts_tuning_req(void);

    inline vehicle_parts_tuning_req& operator=(const vehicle_parts_tuning_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_parts_tuning_req* new_instance(void) const;
    virtual vehicle_parts_tuning_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_parts_tuning_req& from);
    void merge_from(const vehicle_parts_tuning_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // vehicle_no
    SpringCat::int32_t get_vehicle_no(void) const;
    void set_vehicle_no(SpringCat::int32_t value);

    // parts_id
    vehicle_parts_id get_parts_id(void) const;
    void set_parts_id(vehicle_parts_id value);
};
// ------------------------------------------------------------------------------------------------

class vehicle_parts_tuning_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<vehicle> updated_vehicle_;
    std::auto_ptr<vehicle_stuff> updated_stuffs_;

public:
    vehicle_parts_tuning_ans(void);
    vehicle_parts_tuning_ans(const vehicle_parts_tuning_ans& from);
    virtual ~vehicle_parts_tuning_ans(void);

    inline vehicle_parts_tuning_ans& operator=(const vehicle_parts_tuning_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual vehicle_parts_tuning_ans* new_instance(void) const;
    virtual vehicle_parts_tuning_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const vehicle_parts_tuning_ans& from);
    void merge_from(const vehicle_parts_tuning_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // updated_vehicle
    const vehicle* get_updated_vehicle(void) const;
    vehicle* get_mutable_updated_vehicle(void);

    // updated_stuffs
    const vehicle_stuff* get_updated_stuffs(void) const;
    vehicle_stuff* get_mutable_updated_stuffs(void);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_VEHICLE_DC_INCLUDE__
