// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_INTERNAL_LS_LS_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_INTERNAL_LS_LS_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "common_def.dc.h"

namespace protocol
{

class internal_player_end_game_report_notify;

// ================================================================================================

class internal_player_end_game_report_notify : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<10> __has_bits__;

private:
    SpringCat::int32_t mode_;
    SpringCat::uint64_t player_no_;
    SpringCat::int32_t vehicle_no_;
    bool is_giveup_;
    SpringCat::int8_t final_rank_;
    SpringCat::int32_t inc_game_money_;
    SpringCat::int32_t inc_exp_;
    SpringCat::int32_t first_reward_stuff_id_;
    SpringCat::int32_t second_reward_stuff_id_;
    std::map<record_data_key, SpringCat::int32_t> play_data_;

public:
    internal_player_end_game_report_notify(void);
    internal_player_end_game_report_notify(const internal_player_end_game_report_notify& from);
    virtual ~internal_player_end_game_report_notify(void);

    inline internal_player_end_game_report_notify& operator=(const internal_player_end_game_report_notify& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_player_end_game_report_notify* new_instance(void) const;
    virtual internal_player_end_game_report_notify* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_player_end_game_report_notify& from);
    void merge_from(const internal_player_end_game_report_notify& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // mode
    GameMode get_mode(void) const;
    void set_mode(GameMode value);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);

    // vehicle_no
    SpringCat::int32_t get_vehicle_no(void) const;
    void set_vehicle_no(SpringCat::int32_t value);

    // is_giveup
    bool get_is_giveup(void) const;
    void set_is_giveup(bool value);

    // final_rank
    SpringCat::int8_t get_final_rank(void) const;
    void set_final_rank(SpringCat::int8_t value);

    // inc_game_money
    SpringCat::int32_t get_inc_game_money(void) const;
    void set_inc_game_money(SpringCat::int32_t value);

    // inc_exp
    SpringCat::int32_t get_inc_exp(void) const;
    void set_inc_exp(SpringCat::int32_t value);

    // first_reward_stuff_id
    SpringCat::int32_t get_first_reward_stuff_id(void) const;
    void set_first_reward_stuff_id(SpringCat::int32_t value);

    // second_reward_stuff_id
    SpringCat::int32_t get_second_reward_stuff_id(void) const;
    void set_second_reward_stuff_id(SpringCat::int32_t value);

    // play_data
    const std::map<record_data_key, SpringCat::int32_t>& get_play_data(void) const;
    std::map<record_data_key, SpringCat::int32_t>* get_mutable_play_data(void);
    bool get_play_data(record_data_key key, SpringCat::int32_t* value) const;
    void set_play_data(record_data_key key, SpringCat::int32_t value);
    bool insert_play_data(record_data_key key, SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_INTERNAL_LS_LS_DC_INCLUDE__
