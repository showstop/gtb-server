// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_COMMON_DEF_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_COMMON_DEF_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>


namespace protocol
{

class match_item_info;
class reward_info;
class server_address;
class asset_info;

enum LoginType
{
    LoginType_FACEBOOK = 1,
    LoginType_GOOGLE = 2,
    LoginType_GUEST = 98,
};    // enum LoginType

enum TutorialProgress
{
    TutorialProgress_INITIALIZE = 0,
    TutorialProgress_CONTROL_TUTORIAL_BEGIN = 1,
    TutorialProgress_CONTROL_TUTORIAL_END = 2,
    TutorialProgress_LOBBY_TUTORIAL_BEGIN = 3,
    TutorialProgress_LOBBY_TUTORIAL_END = 4,
    TutorialProgress_ALL_COMPLETE = 5,
};    // enum TutorialProgress

enum GameMode
{
    GameMode_QUICK = 1,
    GameMode_GRANDPRIX = 2,
};    // enum GameMode

enum RewardType
{
    RewardType_GOLD = 1,
    RewardType_DIAMOND = 2,
    RewardType_QUICK_MATCH_TICKET = 3,
    RewardType_GRANDPRIX_TICKET = 4,
    RewardType_VEHICLE_SPECIFIC_CARD = 10,
    RewardType_VEHICLE_SELECT_CARD = 11,
    RewardType_VEHICLE_PICK_CARD = 12,
    RewardType_STUFF = 13,
};    // enum RewardType

enum record_data_key
{
    record_data_key_LOGIN_COUNT = 101,
    record_data_key_FACEBOOK_POSTING = 102,
    record_data_key_FACEBOOK_LIKE = 103,
    record_data_key_FACEBOOK_FRIEND_INVITE = 104,
    record_data_key_ACHIEVEMENT_COUNT = 105,
    record_data_key_ACQ_GOLD_MEDAL = 1001,
    record_data_key_ACQ_SILVER_MEDAL = 1002,
    record_data_key_ACQ_BRONZE_MEDAL = 1003,
    record_data_key_RUNNING_DISTANCE = 1004,
    record_data_key_ACQ_GAME_MONEY = 1006,
    record_data_key_PLAY_COUNT = 1007,
    record_data_key_USE_ITEM_COUNT = 1008,
    record_data_key_KNOCK_COUNT = 1009,
    record_data_key_OVERWHELM_FIRST = 1010,
    record_data_key_NARROW_SECOND = 1011,
    record_data_key_CONTINUOUS_FIRST = 1012,
    record_data_key_CONTINUOUS_LAST = 1013,
    record_data_key_NO_DEATH_GAME = 1014,
    record_data_key_FRIEND_COUNT = 1015,
    record_data_key_COLLECT_ACHIEVEMENT = 1016,
    record_data_key_BUMP_ATTACK = 1017,
    record_data_key_DEATH = 1018,
    record_data_key_KILL = 1019,
    record_data_key_TOTAL_PLAY_SEC = 1020,
    record_data_key_USE_INGAME_ITEM = 1021,
    record_data_key_ACQ_INGAME_ITEM = 1022,
    record_data_key_QUICK_MATCH_PLAY_COUNT = 1023,
    record_data_key_QUICK_MATCH_PLAY_SEC = 1024,
    record_data_key_GRANDPRIX_PLAY_COUNT = 1025,
    record_data_key_GRANDPRIX_PLAY_SEC = 1026,
    record_data_key_UPGRADE_VEHICLE = 1027,
    record_data_key_PARTS_TUNING = 1028,
    record_data_key_ACQ_NORMAL_STUFF = 1029,
    record_data_key_ACQ_RARE_STUFF = 1030,
    record_data_key_USE_GACHA_COUNT = 1031,
    record_data_key_OPEN_LUCKY_BOX = 1032,
    record_data_key_WATCH_VIDEO_AD_COUNT = 1033,
    record_data_key_DEAL_DAMAGE = 1034,
    record_data_key_TAKE_DAMAGE = 1035,
    record_data_key_DEFENSE_USING_BRAND_NEW = 11101,
    record_data_key_TIME_REWIND = 11102,
    record_data_key_USE_FROST = 11103,
    record_data_key_USE_JACK_BOX = 11104,
    record_data_key_USE_EMERGENCY = 11105,
    record_data_key_USE_ARTISAN_HANDS = 11106,
    record_data_key_USE_SIREN_BOOST = 11107,
    record_data_key_USE_WATER_BOMB = 11108,
    record_data_key_USE_DESTROYER = 11109,
    record_data_key_ONE_SHOT_KILL = 11110,
    record_data_key_USE_BARRICADE = 11111,
    record_data_key_USE_RUN_AWAY = 11112,
    record_data_key_DAMAGE_CHAINING_USING_LIGHTENING_CHAIN = 11113,
    record_data_key_DEFENSE_USING_SPEEDING = 11114,
};    // enum record_data_key

// ================================================================================================

class match_item_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    std::map<SpringCat::int32_t, SpringCat::int16_t> infos_;

public:
    match_item_info(void);
    match_item_info(const match_item_info& from);
    virtual ~match_item_info(void);

    inline match_item_info& operator=(const match_item_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual match_item_info* new_instance(void) const;
    virtual match_item_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const match_item_info& from);
    void merge_from(const match_item_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // infos
    const std::map<SpringCat::int32_t, SpringCat::int16_t>& get_infos(void) const;
    std::map<SpringCat::int32_t, SpringCat::int16_t>* get_mutable_infos(void);
    bool get_infos(SpringCat::int32_t key, SpringCat::int16_t* value) const;
    void set_infos(SpringCat::int32_t key, SpringCat::int16_t value);
    bool insert_infos(SpringCat::int32_t key, SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------

class reward_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    SpringCat::int32_t type_;
    SpringCat::int32_t specific_id_;
    SpringCat::int32_t quantity_;

public:
    reward_info(void);
    reward_info(const reward_info& from);
    virtual ~reward_info(void);

    inline reward_info& operator=(const reward_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual reward_info* new_instance(void) const;
    virtual reward_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const reward_info& from);
    void merge_from(const reward_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // type
    RewardType get_type(void) const;
    void set_type(RewardType value);

    // specific_id
    SpringCat::int32_t get_specific_id(void) const;
    void set_specific_id(SpringCat::int32_t value);

    // quantity
    SpringCat::int32_t get_quantity(void) const;
    void set_quantity(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class server_address : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    std::string domain_;
    SpringCat::uint16_t port_;

public:
    server_address(void);
    server_address(const server_address& from);
    virtual ~server_address(void);

    inline server_address& operator=(const server_address& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual server_address* new_instance(void) const;
    virtual server_address* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const server_address& from);
    void merge_from(const server_address& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // domain
    const std::string& get_domain(void) const;
    std::string* get_mutable_domain(void);
    void set_domain(const std::string& value);
    void set_domain(const char* value);

    // port
    SpringCat::uint16_t get_port(void) const;
    void set_port(SpringCat::uint16_t value);
};
// ------------------------------------------------------------------------------------------------

class asset_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<6> __has_bits__;

private:
    SpringCat::int32_t gold_;
    SpringCat::int32_t diamond_;
    SpringCat::int16_t quick_ticket_;
    SpringCat::int64_t quick_timestamp_;
    SpringCat::int16_t grandprix_ticket_;
    SpringCat::int64_t grandprix_timestamp_;

public:
    asset_info(void);
    asset_info(const asset_info& from);
    virtual ~asset_info(void);

    inline asset_info& operator=(const asset_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual asset_info* new_instance(void) const;
    virtual asset_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const asset_info& from);
    void merge_from(const asset_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // gold
    SpringCat::int32_t get_gold(void) const;
    void set_gold(SpringCat::int32_t value);

    // diamond
    SpringCat::int32_t get_diamond(void) const;
    void set_diamond(SpringCat::int32_t value);

    // quick_ticket
    SpringCat::int16_t get_quick_ticket(void) const;
    void set_quick_ticket(SpringCat::int16_t value);

    // quick_timestamp
    SpringCat::int64_t get_quick_timestamp(void) const;
    void set_quick_timestamp(SpringCat::int64_t value);

    // grandprix_ticket
    SpringCat::int16_t get_grandprix_ticket(void) const;
    void set_grandprix_ticket(SpringCat::int16_t value);

    // grandprix_timestamp
    SpringCat::int64_t get_grandprix_timestamp(void) const;
    void set_grandprix_timestamp(SpringCat::int64_t value);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_COMMON_DEF_DC_INCLUDE__
