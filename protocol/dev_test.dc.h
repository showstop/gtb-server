// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_DEV_TEST_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_DEV_TEST_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "vehicle.dc.h"

namespace dev
{

class put_vehicle_card_req;
class put_vehicle_card_ans;
class put_vehicle_stuff_req;
class put_vehicle_stuff_ans;

// ================================================================================================

class put_vehicle_card_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int32_t vehicle_no_;
    SpringCat::int32_t quantity_;

public:
    put_vehicle_card_req(void);
    put_vehicle_card_req(const put_vehicle_card_req& from);
    virtual ~put_vehicle_card_req(void);

    inline put_vehicle_card_req& operator=(const put_vehicle_card_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual put_vehicle_card_req* new_instance(void) const;
    virtual put_vehicle_card_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const put_vehicle_card_req& from);
    void merge_from(const put_vehicle_card_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // vehicle_no
    SpringCat::int32_t get_vehicle_no(void) const;
    void set_vehicle_no(SpringCat::int32_t value);

    // quantity
    SpringCat::int32_t get_quantity(void) const;
    void set_quantity(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class put_vehicle_card_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<protocol::vehicle> updated_vehicle_;

public:
    put_vehicle_card_ans(void);
    put_vehicle_card_ans(const put_vehicle_card_ans& from);
    virtual ~put_vehicle_card_ans(void);

    inline put_vehicle_card_ans& operator=(const put_vehicle_card_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual put_vehicle_card_ans* new_instance(void) const;
    virtual put_vehicle_card_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const put_vehicle_card_ans& from);
    void merge_from(const put_vehicle_card_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // updated_vehicle
    const protocol::vehicle* get_updated_vehicle(void) const;
    protocol::vehicle* get_mutable_updated_vehicle(void);
};
// ------------------------------------------------------------------------------------------------

class put_vehicle_stuff_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int32_t stuff_id_;
    SpringCat::int32_t quantity_;

public:
    put_vehicle_stuff_req(void);
    put_vehicle_stuff_req(const put_vehicle_stuff_req& from);
    virtual ~put_vehicle_stuff_req(void);

    inline put_vehicle_stuff_req& operator=(const put_vehicle_stuff_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual put_vehicle_stuff_req* new_instance(void) const;
    virtual put_vehicle_stuff_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const put_vehicle_stuff_req& from);
    void merge_from(const put_vehicle_stuff_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // stuff_id
    SpringCat::int32_t get_stuff_id(void) const;
    void set_stuff_id(SpringCat::int32_t value);

    // quantity
    SpringCat::int32_t get_quantity(void) const;
    void set_quantity(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class put_vehicle_stuff_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<protocol::vehicle_stuff> updated_stuffs_;

public:
    put_vehicle_stuff_ans(void);
    put_vehicle_stuff_ans(const put_vehicle_stuff_ans& from);
    virtual ~put_vehicle_stuff_ans(void);

    inline put_vehicle_stuff_ans& operator=(const put_vehicle_stuff_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual put_vehicle_stuff_ans* new_instance(void) const;
    virtual put_vehicle_stuff_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const put_vehicle_stuff_ans& from);
    void merge_from(const put_vehicle_stuff_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // updated_stuffs
    const protocol::vehicle_stuff* get_updated_stuffs(void) const;
    protocol::vehicle_stuff* get_mutable_updated_stuffs(void);
};
// ------------------------------------------------------------------------------------------------



}    // namespace dev

#endif    // __SPRINGCAT_WAVE_DEV_TEST_DC_INCLUDE__
