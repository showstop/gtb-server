// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_INTERNAL_AS_LS_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_INTERNAL_AS_LS_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "common_def.dc.h"

namespace protocol
{

class internal_login_req;
class internal_login_ans;

// ================================================================================================

class internal_login_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    SpringCat::uint64_t player_no_;
    std::vector<SpringCat::uint8_t> key_;
    std::vector<SpringCat::uint8_t> iv_;

public:
    internal_login_req(void);
    internal_login_req(const internal_login_req& from);
    virtual ~internal_login_req(void);

    inline internal_login_req& operator=(const internal_login_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_login_req* new_instance(void) const;
    virtual internal_login_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_login_req& from);
    void merge_from(const internal_login_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);

    // key
    const std::vector<SpringCat::uint8_t>& get_key(void) const;
    std::vector<SpringCat::uint8_t>* get_mutable_key(void);
    SpringCat::uint8_t get_key(size_t index) const;
    void set_key(size_t index, SpringCat::uint8_t value);
    void add_key(SpringCat::uint8_t value);

    // iv
    const std::vector<SpringCat::uint8_t>& get_iv(void) const;
    std::vector<SpringCat::uint8_t>* get_mutable_iv(void);
    SpringCat::uint8_t get_iv(size_t index) const;
    void set_iv(size_t index, SpringCat::uint8_t value);
    void add_iv(SpringCat::uint8_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_login_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<4> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::uint64_t player_no_;
    SpringCat::int32_t session_id_;
    std::auto_ptr<server_address> ls_addr_;

public:
    internal_login_ans(void);
    internal_login_ans(const internal_login_ans& from);
    virtual ~internal_login_ans(void);

    inline internal_login_ans& operator=(const internal_login_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_login_ans* new_instance(void) const;
    virtual internal_login_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_login_ans& from);
    void merge_from(const internal_login_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);

    // session_id
    SpringCat::int32_t get_session_id(void) const;
    void set_session_id(SpringCat::int32_t value);

    // ls_addr
    const server_address* get_ls_addr(void) const;
    server_address* get_mutable_ls_addr(void);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_INTERNAL_AS_LS_DC_INCLUDE__
