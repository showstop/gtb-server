// Generated by the DRCat compiler. DO NOT EDIT!

using System.Collections.Generic;
using System.IO;
using System;


namespace protocol
{

    // ================================================================================================

    public class internal_register_ps_req : Yippee.Net.IObjectBase
    {
        private int psNo_;
        private static Yippee.Net.TypeInfo internal_register_ps_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xA41F221, "protocol.internal_register_ps_req");

        public internal_register_ps_req()
        {
        }
        public internal_register_ps_req(internal_register_ps_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return internal_register_ps_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new internal_register_ps_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new internal_register_ps_req(this);
        }
        public void Clear()
        {
            // psNo
            psNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // psNo
            totalSize += Yippee.Net.Internal.Size(psNo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((internal_register_ps_req)from);
        }
        public void CopyFrom(internal_register_ps_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((internal_register_ps_req)from);
        }
        public void MergeFrom(internal_register_ps_req from)
        {
            if (from == this)
            {
                return;
            }

            // psNo
            SetPsNo(from.GetPsNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // psNo
            if (Yippee.Net.Internal.Serialize(output, psNo_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // psNo
            if (Yippee.Net.Internal.Deserialize(input, out psNo_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetPsNo()
        {
            return psNo_;
        }
        public void SetPsNo(int value)
        {
            psNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class internal_register_ps_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private static Yippee.Net.TypeInfo internal_register_ps_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xA41CEB3, "protocol.internal_register_ps_ans");

        public internal_register_ps_ans()
        {
        }
        public internal_register_ps_ans(internal_register_ps_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return internal_register_ps_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new internal_register_ps_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new internal_register_ps_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((internal_register_ps_ans)from);
        }
        public void CopyFrom(internal_register_ps_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((internal_register_ps_ans)from);
        }
        public void MergeFrom(internal_register_ps_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class player_requisite_info : Yippee.Net.IObjectBase
    {
        private bool isAi_;
        private player_profile_info profile_ = new player_profile_info();
        private vehicle selectedCar_ = new vehicle();
        private ability_slot equippedAbility_ = new ability_slot();
        private ability_list abilities_ = new ability_list();
        private match_item_info matchItems_ = new match_item_info();
        private static Yippee.Net.TypeInfo player_requisite_infoTypeInfo_ = new Yippee.Net.TypeInfo(0x1D5B63F, "protocol.player_requisite_info");

        public player_requisite_info()
        {
        }
        public player_requisite_info(player_requisite_info from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return player_requisite_infoTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new player_requisite_info();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new player_requisite_info(this);
        }
        public void Clear()
        {
            // isAi
            isAi_ = false;
            // profile
            profile_.Clear();
            // selectedCar
            selectedCar_.Clear();
            // equippedAbility
            equippedAbility_.Clear();
            // abilities
            abilities_.Clear();
            // matchItems
            matchItems_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // isAi
            totalSize += Yippee.Net.Internal.Size(isAi_);
            // profile
            totalSize += Yippee.Net.Internal.Size(profile_);
            // selectedCar
            totalSize += Yippee.Net.Internal.Size(selectedCar_);
            // equippedAbility
            totalSize += Yippee.Net.Internal.Size(equippedAbility_);
            // abilities
            totalSize += Yippee.Net.Internal.Size(abilities_);
            // matchItems
            totalSize += Yippee.Net.Internal.Size(matchItems_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((player_requisite_info)from);
        }
        public void CopyFrom(player_requisite_info from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((player_requisite_info)from);
        }
        public void MergeFrom(player_requisite_info from)
        {
            if (from == this)
            {
                return;
            }

            // isAi
            SetIsAi(from.GetIsAi());
            // profile
            SetProfile(from.GetProfile());
            // selectedCar
            SetSelectedCar(from.GetSelectedCar());
            // equippedAbility
            SetEquippedAbility(from.GetEquippedAbility());
            // abilities
            SetAbilities(from.GetAbilities());
            // matchItems
            SetMatchItems(from.GetMatchItems());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // isAi
            if (Yippee.Net.Internal.Serialize(output, isAi_) == false)
            {
                return false;
            }
            // profile
            if (profile_.Serialize(stream) == false)
            {
                return false;
            }
            // selectedCar
            if (selectedCar_.Serialize(stream) == false)
            {
                return false;
            }
            // equippedAbility
            if (equippedAbility_.Serialize(stream) == false)
            {
                return false;
            }
            // abilities
            if (abilities_.Serialize(stream) == false)
            {
                return false;
            }
            // matchItems
            if (matchItems_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // isAi
            if (Yippee.Net.Internal.Deserialize(input, out isAi_) == false)
            {
                return false;
            }
            // profile
            if (profile_.Deserialize(stream) == false)
            {
                return false;
            }
            // selectedCar
            if (selectedCar_.Deserialize(stream) == false)
            {
                return false;
            }
            // equippedAbility
            if (equippedAbility_.Deserialize(stream) == false)
            {
                return false;
            }
            // abilities
            if (abilities_.Deserialize(stream) == false)
            {
                return false;
            }
            // matchItems
            if (matchItems_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool GetIsAi()
        {
            return isAi_;
        }
        public void SetIsAi(bool value)
        {
            isAi_ = value;
        }
        public player_profile_info GetProfile()
        {
            return profile_;
        }
        public void SetProfile(player_profile_info value)
        {
            profile_ = value;
        }
        public vehicle GetSelectedCar()
        {
            return selectedCar_;
        }
        public void SetSelectedCar(vehicle value)
        {
            selectedCar_ = value;
        }
        public ability_slot GetEquippedAbility()
        {
            return equippedAbility_;
        }
        public void SetEquippedAbility(ability_slot value)
        {
            equippedAbility_ = value;
        }
        public ability_list GetAbilities()
        {
            return abilities_;
        }
        public void SetAbilities(ability_list value)
        {
            abilities_ = value;
        }
        public match_item_info GetMatchItems()
        {
            return matchItems_;
        }
        public void SetMatchItems(match_item_info value)
        {
            matchItems_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class internal_start_game_req : Yippee.Net.IObjectBase
    {
        private Dictionary<ulong, player_requisite_info> playerInfos_ = new Dictionary<ulong, player_requisite_info>();
        private static Yippee.Net.TypeInfo internal_start_game_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xDD1AE51, "protocol.internal_start_game_req");

        public internal_start_game_req()
        {
        }
        public internal_start_game_req(internal_start_game_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return internal_start_game_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new internal_start_game_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new internal_start_game_req(this);
        }
        public void Clear()
        {
            // playerInfos
            playerInfos_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // playerInfos
            totalSize += sizeof(uint);
            totalSize += sizeof(ulong) * playerInfos_.Count;
            foreach (KeyValuePair<ulong, player_requisite_info> pair in playerInfos_)
            {
                totalSize += Yippee.Net.Internal.Size(pair.Value);
            }

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((internal_start_game_req)from);
        }
        public void CopyFrom(internal_start_game_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((internal_start_game_req)from);
        }
        public void MergeFrom(internal_start_game_req from)
        {
            if (from == this)
            {
                return;
            }

            // playerInfos
            foreach (KeyValuePair<ulong, player_requisite_info> pair in from.GetPlayerInfos())
            {
                SetPlayerInfos(pair.Key, pair.Value);
            }
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // playerInfos
            uint playerInfosLength = (uint)playerInfos_.Count;
            if (Yippee.Net.Internal.Serialize(output, playerInfosLength) == false)
            {
                return false;
            }
            foreach (KeyValuePair<ulong, player_requisite_info> pair in playerInfos_)
            {
                if (Yippee.Net.Internal.Serialize(output, pair.Key) == false)
                {
                    return false;
                }
                if (Yippee.Net.Internal.Serialize(output, pair.Value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // playerInfos
            uint playerInfosLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out playerInfosLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < playerInfosLength; ++i)
            {
                ulong key;
                if (Yippee.Net.Internal.Deserialize(input, out key) == false)
                {
                    return false;
                }
                player_requisite_info value = new player_requisite_info();
                if (Yippee.Net.Internal.Deserialize(input, value) == false)
                {
                    return false;
                }
                SetPlayerInfos(key, value);
            }

            return true;
        }
        public Dictionary<ulong, player_requisite_info> GetPlayerInfos()
        {
            return playerInfos_;
        }
        public bool GetPlayerInfos(ulong key, out player_requisite_info value)
        {
            return playerInfos_.TryGetValue(key, out value);
        }
        public player_requisite_info GetPlayerInfos(ulong key)
        {
            player_requisite_info ret;
            playerInfos_.TryGetValue(key, out ret);
            return ret;
        }
        public void SetPlayerInfos(ulong key, player_requisite_info value)
        {
            playerInfos_[key] = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class internal_start_game_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private static Yippee.Net.TypeInfo internal_start_game_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xDD192C3, "protocol.internal_start_game_ans");

        public internal_start_game_ans()
        {
        }
        public internal_start_game_ans(internal_start_game_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return internal_start_game_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new internal_start_game_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new internal_start_game_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((internal_start_game_ans)from);
        }
        public void CopyFrom(internal_start_game_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((internal_start_game_ans)from);
        }
        public void MergeFrom(internal_start_game_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class internal_player_end_game_report_req : Yippee.Net.IObjectBase
    {
        private ulong playerNo_;
        private int usingVehicleNo_;
        private bool giveupGame_;
        private sbyte finalRank_;
        private short incGameMoney_;
        private short incPlayerExp_;
        private Dictionary<record_data_key, int> playData_ = new Dictionary<record_data_key, int>();
        private static Yippee.Net.TypeInfo internal_player_end_game_report_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xC8A5C71, "protocol.internal_player_end_game_report_req");

        public internal_player_end_game_report_req()
        {
        }
        public internal_player_end_game_report_req(internal_player_end_game_report_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return internal_player_end_game_report_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new internal_player_end_game_report_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new internal_player_end_game_report_req(this);
        }
        public void Clear()
        {
            // playerNo
            playerNo_ = 0;
            // usingVehicleNo
            usingVehicleNo_ = 0;
            // giveupGame
            giveupGame_ = false;
            // finalRank
            finalRank_ = 0;
            // incGameMoney
            incGameMoney_ = 0;
            // incPlayerExp
            incPlayerExp_ = 0;
            // playData
            playData_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // playerNo
            totalSize += Yippee.Net.Internal.Size(playerNo_);
            // usingVehicleNo
            totalSize += Yippee.Net.Internal.Size(usingVehicleNo_);
            // giveupGame
            totalSize += Yippee.Net.Internal.Size(giveupGame_);
            // finalRank
            totalSize += Yippee.Net.Internal.Size(finalRank_);
            // incGameMoney
            totalSize += Yippee.Net.Internal.Size(incGameMoney_);
            // incPlayerExp
            totalSize += Yippee.Net.Internal.Size(incPlayerExp_);
            // playData
            totalSize += sizeof(uint);
            totalSize += sizeof(record_data_key) * playData_.Count;
            totalSize += sizeof(int) * playData_.Count;

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((internal_player_end_game_report_req)from);
        }
        public void CopyFrom(internal_player_end_game_report_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((internal_player_end_game_report_req)from);
        }
        public void MergeFrom(internal_player_end_game_report_req from)
        {
            if (from == this)
            {
                return;
            }

            // playerNo
            SetPlayerNo(from.GetPlayerNo());
            // usingVehicleNo
            SetUsingVehicleNo(from.GetUsingVehicleNo());
            // giveupGame
            SetGiveupGame(from.GetGiveupGame());
            // finalRank
            SetFinalRank(from.GetFinalRank());
            // incGameMoney
            SetIncGameMoney(from.GetIncGameMoney());
            // incPlayerExp
            SetIncPlayerExp(from.GetIncPlayerExp());
            // playData
            foreach (KeyValuePair<record_data_key, int> pair in from.GetPlayData())
            {
                SetPlayData(pair.Key, pair.Value);
            }
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // playerNo
            if (Yippee.Net.Internal.Serialize(output, playerNo_) == false)
            {
                return false;
            }
            // usingVehicleNo
            if (Yippee.Net.Internal.Serialize(output, usingVehicleNo_) == false)
            {
                return false;
            }
            // giveupGame
            if (Yippee.Net.Internal.Serialize(output, giveupGame_) == false)
            {
                return false;
            }
            // finalRank
            if (Yippee.Net.Internal.Serialize(output, finalRank_) == false)
            {
                return false;
            }
            // incGameMoney
            if (Yippee.Net.Internal.Serialize(output, incGameMoney_) == false)
            {
                return false;
            }
            // incPlayerExp
            if (Yippee.Net.Internal.Serialize(output, incPlayerExp_) == false)
            {
                return false;
            }
            // playData
            uint playDataLength = (uint)playData_.Count;
            if (Yippee.Net.Internal.Serialize(output, playDataLength) == false)
            {
                return false;
            }
            foreach (KeyValuePair<record_data_key, int> pair in playData_)
            {
                int key = (int)pair.Key;
                if (Yippee.Net.Internal.Serialize(output, key) == false)
                {
                    return false;
                }
                if (Yippee.Net.Internal.Serialize(output, pair.Value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // playerNo
            if (Yippee.Net.Internal.Deserialize(input, out playerNo_) == false)
            {
                return false;
            }
            // usingVehicleNo
            if (Yippee.Net.Internal.Deserialize(input, out usingVehicleNo_) == false)
            {
                return false;
            }
            // giveupGame
            if (Yippee.Net.Internal.Deserialize(input, out giveupGame_) == false)
            {
                return false;
            }
            // finalRank
            if (Yippee.Net.Internal.Deserialize(input, out finalRank_) == false)
            {
                return false;
            }
            // incGameMoney
            if (Yippee.Net.Internal.Deserialize(input, out incGameMoney_) == false)
            {
                return false;
            }
            // incPlayerExp
            if (Yippee.Net.Internal.Deserialize(input, out incPlayerExp_) == false)
            {
                return false;
            }
            // playData
            uint playDataLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out playDataLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < playDataLength; ++i)
            {
                int key;
                if (Yippee.Net.Internal.Deserialize(input, out key) == false)
                {
                    return false;
                }
                int value;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                SetPlayData((record_data_key)key, value);
            }

            return true;
        }
        public ulong GetPlayerNo()
        {
            return playerNo_;
        }
        public void SetPlayerNo(ulong value)
        {
            playerNo_ = value;
        }
        public int GetUsingVehicleNo()
        {
            return usingVehicleNo_;
        }
        public void SetUsingVehicleNo(int value)
        {
            usingVehicleNo_ = value;
        }
        public bool GetGiveupGame()
        {
            return giveupGame_;
        }
        public void SetGiveupGame(bool value)
        {
            giveupGame_ = value;
        }
        public sbyte GetFinalRank()
        {
            return finalRank_;
        }
        public void SetFinalRank(sbyte value)
        {
            finalRank_ = value;
        }
        public short GetIncGameMoney()
        {
            return incGameMoney_;
        }
        public void SetIncGameMoney(short value)
        {
            incGameMoney_ = value;
        }
        public short GetIncPlayerExp()
        {
            return incPlayerExp_;
        }
        public void SetIncPlayerExp(short value)
        {
            incPlayerExp_ = value;
        }
        public Dictionary<record_data_key, int> GetPlayData()
        {
            return playData_;
        }
        public bool GetPlayData(record_data_key key, out int value)
        {
            return playData_.TryGetValue(key, out value);
        }
        public int GetPlayData(record_data_key key)
        {
            int ret;
            playData_.TryGetValue(key, out ret);
            return ret;
        }
        public void SetPlayData(record_data_key key, int value)
        {
            playData_[key] = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class internal_player_end_game_report_ans : Yippee.Net.IObjectBase
    {
        private ulong playerNo_;
        private bool giveupGame_;
        private sbyte finalRank_;
        private int firstAcquiredStuffId_;
        private int secondAcquiredStuffId_;
        private static Yippee.Net.TypeInfo internal_player_end_game_report_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xC8A64E3, "protocol.internal_player_end_game_report_ans");

        public internal_player_end_game_report_ans()
        {
        }
        public internal_player_end_game_report_ans(internal_player_end_game_report_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return internal_player_end_game_report_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new internal_player_end_game_report_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new internal_player_end_game_report_ans(this);
        }
        public void Clear()
        {
            // playerNo
            playerNo_ = 0;
            // giveupGame
            giveupGame_ = false;
            // finalRank
            finalRank_ = 0;
            // firstAcquiredStuffId
            firstAcquiredStuffId_ = 0;
            // secondAcquiredStuffId
            secondAcquiredStuffId_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // playerNo
            totalSize += Yippee.Net.Internal.Size(playerNo_);
            // giveupGame
            totalSize += Yippee.Net.Internal.Size(giveupGame_);
            // finalRank
            totalSize += Yippee.Net.Internal.Size(finalRank_);
            // firstAcquiredStuffId
            totalSize += Yippee.Net.Internal.Size(firstAcquiredStuffId_);
            // secondAcquiredStuffId
            totalSize += Yippee.Net.Internal.Size(secondAcquiredStuffId_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((internal_player_end_game_report_ans)from);
        }
        public void CopyFrom(internal_player_end_game_report_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((internal_player_end_game_report_ans)from);
        }
        public void MergeFrom(internal_player_end_game_report_ans from)
        {
            if (from == this)
            {
                return;
            }

            // playerNo
            SetPlayerNo(from.GetPlayerNo());
            // giveupGame
            SetGiveupGame(from.GetGiveupGame());
            // finalRank
            SetFinalRank(from.GetFinalRank());
            // firstAcquiredStuffId
            SetFirstAcquiredStuffId(from.GetFirstAcquiredStuffId());
            // secondAcquiredStuffId
            SetSecondAcquiredStuffId(from.GetSecondAcquiredStuffId());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // playerNo
            if (Yippee.Net.Internal.Serialize(output, playerNo_) == false)
            {
                return false;
            }
            // giveupGame
            if (Yippee.Net.Internal.Serialize(output, giveupGame_) == false)
            {
                return false;
            }
            // finalRank
            if (Yippee.Net.Internal.Serialize(output, finalRank_) == false)
            {
                return false;
            }
            // firstAcquiredStuffId
            if (Yippee.Net.Internal.Serialize(output, firstAcquiredStuffId_) == false)
            {
                return false;
            }
            // secondAcquiredStuffId
            if (Yippee.Net.Internal.Serialize(output, secondAcquiredStuffId_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // playerNo
            if (Yippee.Net.Internal.Deserialize(input, out playerNo_) == false)
            {
                return false;
            }
            // giveupGame
            if (Yippee.Net.Internal.Deserialize(input, out giveupGame_) == false)
            {
                return false;
            }
            // finalRank
            if (Yippee.Net.Internal.Deserialize(input, out finalRank_) == false)
            {
                return false;
            }
            // firstAcquiredStuffId
            if (Yippee.Net.Internal.Deserialize(input, out firstAcquiredStuffId_) == false)
            {
                return false;
            }
            // secondAcquiredStuffId
            if (Yippee.Net.Internal.Deserialize(input, out secondAcquiredStuffId_) == false)
            {
                return false;
            }

            return true;
        }
        public ulong GetPlayerNo()
        {
            return playerNo_;
        }
        public void SetPlayerNo(ulong value)
        {
            playerNo_ = value;
        }
        public bool GetGiveupGame()
        {
            return giveupGame_;
        }
        public void SetGiveupGame(bool value)
        {
            giveupGame_ = value;
        }
        public sbyte GetFinalRank()
        {
            return finalRank_;
        }
        public void SetFinalRank(sbyte value)
        {
            finalRank_ = value;
        }
        public int GetFirstAcquiredStuffId()
        {
            return firstAcquiredStuffId_;
        }
        public void SetFirstAcquiredStuffId(int value)
        {
            firstAcquiredStuffId_ = value;
        }
        public int GetSecondAcquiredStuffId()
        {
            return secondAcquiredStuffId_;
        }
        public void SetSecondAcquiredStuffId(int value)
        {
            secondAcquiredStuffId_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class internal_end_game_req : Yippee.Net.IObjectBase
    {
        private int psNo_;
        private static Yippee.Net.TypeInfo internal_end_game_reqTypeInfo_ = new Yippee.Net.TypeInfo(0x85D6E31, "protocol.internal_end_game_req");

        public internal_end_game_req()
        {
        }
        public internal_end_game_req(internal_end_game_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return internal_end_game_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new internal_end_game_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new internal_end_game_req(this);
        }
        public void Clear()
        {
            // psNo
            psNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // psNo
            totalSize += Yippee.Net.Internal.Size(psNo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((internal_end_game_req)from);
        }
        public void CopyFrom(internal_end_game_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((internal_end_game_req)from);
        }
        public void MergeFrom(internal_end_game_req from)
        {
            if (from == this)
            {
                return;
            }

            // psNo
            SetPsNo(from.GetPsNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // psNo
            if (Yippee.Net.Internal.Serialize(output, psNo_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // psNo
            if (Yippee.Net.Internal.Deserialize(input, out psNo_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetPsNo()
        {
            return psNo_;
        }
        public void SetPsNo(int value)
        {
            psNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class internal_end_game_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private static Yippee.Net.TypeInfo internal_end_game_ansTypeInfo_ = new Yippee.Net.TypeInfo(0x85D52A3, "protocol.internal_end_game_ans");

        public internal_end_game_ans()
        {
        }
        public internal_end_game_ans(internal_end_game_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return internal_end_game_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new internal_end_game_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new internal_end_game_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((internal_end_game_ans)from);
        }
        public void CopyFrom(internal_end_game_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((internal_end_game_ans)from);
        }
        public void MergeFrom(internal_end_game_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------


}	// namespace protocol