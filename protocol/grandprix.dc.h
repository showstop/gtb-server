// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_GRANDPRIX_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_GRANDPRIX_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "common_def.dc.h"

namespace protocol
{

class grandprix_info;
class grandprix_rank_unit;
class grandprix_info_req;
class grandprix_info_ans;
class grandprix_rank_info_req;
class grandprix_rank_info_ans;

enum grandprix_rank_type
{
    grandprix_rank_type_LEAGUE = 1,
    grandprix_rank_type_GLOBAL = 2,
};    // enum grandprix_rank_type

enum grandprix_league
{
    grandprix_league_ROOKIE = 1,
    grandprix_league_VETERAN = 2,
    grandprix_league_MASTER = 3,
};    // enum grandprix_league

// ================================================================================================

class grandprix_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<7> __has_bits__;

private:
    SpringCat::int32_t gp_point_;
    SpringCat::int16_t repeat_count_;
    SpringCat::int64_t reward_date_;
    std::auto_ptr<reward_info> repeat_reward_;
    SpringCat::int32_t league_;
    SpringCat::uint64_t my_rank_;
    SpringCat::int32_t my_rank_percentile_;

public:
    grandprix_info(void);
    grandprix_info(const grandprix_info& from);
    virtual ~grandprix_info(void);

    inline grandprix_info& operator=(const grandprix_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual grandprix_info* new_instance(void) const;
    virtual grandprix_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const grandprix_info& from);
    void merge_from(const grandprix_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // gp_point
    SpringCat::int32_t get_gp_point(void) const;
    void set_gp_point(SpringCat::int32_t value);

    // repeat_count
    SpringCat::int16_t get_repeat_count(void) const;
    void set_repeat_count(SpringCat::int16_t value);

    // reward_date
    SpringCat::int64_t get_reward_date(void) const;
    void set_reward_date(SpringCat::int64_t value);

    // repeat_reward
    const reward_info* get_repeat_reward(void) const;
    reward_info* get_mutable_repeat_reward(void);

    // league
    grandprix_league get_league(void) const;
    void set_league(grandprix_league value);

    // my_rank
    SpringCat::uint64_t get_my_rank(void) const;
    void set_my_rank(SpringCat::uint64_t value);

    // my_rank_percentile
    SpringCat::int32_t get_my_rank_percentile(void) const;
    void set_my_rank_percentile(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class grandprix_rank_unit : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<6> __has_bits__;

private:
    SpringCat::uint64_t player_no_;
    SpringCat::uint64_t rank_;
    SpringCat::int16_t nation_code_;
    std::string nick_;
    SpringCat::int16_t level_;
    SpringCat::int32_t gp_point_;

public:
    grandprix_rank_unit(void);
    grandprix_rank_unit(const grandprix_rank_unit& from);
    virtual ~grandprix_rank_unit(void);

    inline grandprix_rank_unit& operator=(const grandprix_rank_unit& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual grandprix_rank_unit* new_instance(void) const;
    virtual grandprix_rank_unit* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const grandprix_rank_unit& from);
    void merge_from(const grandprix_rank_unit& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);

    // rank
    SpringCat::uint64_t get_rank(void) const;
    void set_rank(SpringCat::uint64_t value);

    // nation_code
    SpringCat::int16_t get_nation_code(void) const;
    void set_nation_code(SpringCat::int16_t value);

    // nick
    const std::string& get_nick(void) const;
    std::string* get_mutable_nick(void);
    void set_nick(const std::string& value);
    void set_nick(const char* value);

    // level
    SpringCat::int16_t get_level(void) const;
    void set_level(SpringCat::int16_t value);

    // gp_point
    SpringCat::int32_t get_gp_point(void) const;
    void set_gp_point(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class grandprix_info_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<0> __has_bits__;

private:

public:
    grandprix_info_req(void);
    grandprix_info_req(const grandprix_info_req& from);
    virtual ~grandprix_info_req(void);

    inline grandprix_info_req& operator=(const grandprix_info_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual grandprix_info_req* new_instance(void) const;
    virtual grandprix_info_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const grandprix_info_req& from);
    void merge_from(const grandprix_info_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);
};
// ------------------------------------------------------------------------------------------------

class grandprix_info_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<grandprix_info> info_;

public:
    grandprix_info_ans(void);
    grandprix_info_ans(const grandprix_info_ans& from);
    virtual ~grandprix_info_ans(void);

    inline grandprix_info_ans& operator=(const grandprix_info_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual grandprix_info_ans* new_instance(void) const;
    virtual grandprix_info_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const grandprix_info_ans& from);
    void merge_from(const grandprix_info_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // info
    const grandprix_info* get_info(void) const;
    grandprix_info* get_mutable_info(void);
};
// ------------------------------------------------------------------------------------------------

class grandprix_rank_info_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    SpringCat::int32_t rank_type_;
    SpringCat::int64_t begin_rank_;
    SpringCat::int16_t req_count_;

public:
    grandprix_rank_info_req(void);
    grandprix_rank_info_req(const grandprix_rank_info_req& from);
    virtual ~grandprix_rank_info_req(void);

    inline grandprix_rank_info_req& operator=(const grandprix_rank_info_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual grandprix_rank_info_req* new_instance(void) const;
    virtual grandprix_rank_info_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const grandprix_rank_info_req& from);
    void merge_from(const grandprix_rank_info_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // rank_type
    grandprix_rank_type get_rank_type(void) const;
    void set_rank_type(grandprix_rank_type value);

    // begin_rank
    SpringCat::int64_t get_begin_rank(void) const;
    void set_begin_rank(SpringCat::int64_t value);

    // req_count
    SpringCat::int16_t get_req_count(void) const;
    void set_req_count(SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------

class grandprix_rank_info_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    SpringCat::int16_t result_;
    SpringCat::int32_t rank_type_;
    std::vector<grandprix_rank_unit*> infos_;

public:
    grandprix_rank_info_ans(void);
    grandprix_rank_info_ans(const grandprix_rank_info_ans& from);
    virtual ~grandprix_rank_info_ans(void);

    inline grandprix_rank_info_ans& operator=(const grandprix_rank_info_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual grandprix_rank_info_ans* new_instance(void) const;
    virtual grandprix_rank_info_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const grandprix_rank_info_ans& from);
    void merge_from(const grandprix_rank_info_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // rank_type
    grandprix_rank_type get_rank_type(void) const;
    void set_rank_type(grandprix_rank_type value);

    // infos
    const std::vector<grandprix_rank_unit*>& get_infos(void) const;
    std::vector<grandprix_rank_unit*>* get_mutable_infos(void);
    const grandprix_rank_unit* get_infos(size_t index) const;
    grandprix_rank_unit* get_mutable_infos(size_t index);
    grandprix_rank_unit* add_infos(void);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_GRANDPRIX_DC_INCLUDE__
