// Generated by the DRCat compiler. DO NOT EDIT!

using System.Collections.Generic;
using System.IO;
using System;


namespace protocol
{

    // ================================================================================================

    public class connect_lobby_req : Yippee.Net.IObjectBase
    {
        private int sessionId_;
        private static Yippee.Net.TypeInfo connect_lobby_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xB1637F1, "protocol.connect_lobby_req");

        public connect_lobby_req()
        {
        }
        public connect_lobby_req(connect_lobby_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return connect_lobby_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new connect_lobby_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new connect_lobby_req(this);
        }
        public void Clear()
        {
            // sessionId
            sessionId_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // sessionId
            totalSize += Yippee.Net.Internal.Size(sessionId_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((connect_lobby_req)from);
        }
        public void CopyFrom(connect_lobby_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((connect_lobby_req)from);
        }
        public void MergeFrom(connect_lobby_req from)
        {
            if (from == this)
            {
                return;
            }

            // sessionId
            SetSessionId(from.GetSessionId());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // sessionId
            if (Yippee.Net.Internal.Serialize(output, sessionId_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // sessionId
            if (Yippee.Net.Internal.Deserialize(input, out sessionId_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetSessionId()
        {
            return sessionId_;
        }
        public void SetSessionId(int value)
        {
            sessionId_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class connect_lobby_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private ulong playerNo_;
        private static Yippee.Net.TypeInfo connect_lobby_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xB160963, "protocol.connect_lobby_ans");

        public connect_lobby_ans()
        {
        }
        public connect_lobby_ans(connect_lobby_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return connect_lobby_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new connect_lobby_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new connect_lobby_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // playerNo
            playerNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // playerNo
            totalSize += Yippee.Net.Internal.Size(playerNo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((connect_lobby_ans)from);
        }
        public void CopyFrom(connect_lobby_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((connect_lobby_ans)from);
        }
        public void MergeFrom(connect_lobby_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // playerNo
            SetPlayerNo(from.GetPlayerNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // playerNo
            if (Yippee.Net.Internal.Serialize(output, playerNo_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // playerNo
            if (Yippee.Net.Internal.Deserialize(input, out playerNo_) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public ulong GetPlayerNo()
        {
            return playerNo_;
        }
        public void SetPlayerNo(ulong value)
        {
            playerNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class tutorial_progress_update_req : Yippee.Net.IObjectBase
    {
        private TutorialProgress progress_;
        private static Yippee.Net.TypeInfo tutorial_progress_update_reqTypeInfo_ = new Yippee.Net.TypeInfo(0x186CFA1, "protocol.tutorial_progress_update_req");

        public tutorial_progress_update_req()
        {
        }
        public tutorial_progress_update_req(tutorial_progress_update_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return tutorial_progress_update_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new tutorial_progress_update_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new tutorial_progress_update_req(this);
        }
        public void Clear()
        {
            // progress
            progress_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // progress
            totalSize += sizeof(int);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((tutorial_progress_update_req)from);
        }
        public void CopyFrom(tutorial_progress_update_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((tutorial_progress_update_req)from);
        }
        public void MergeFrom(tutorial_progress_update_req from)
        {
            if (from == this)
            {
                return;
            }

            // progress
            SetProgress(from.GetProgress());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // progress
            {
                int value = (int)progress_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // progress
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                progress_ = (TutorialProgress)value;
            }

            return true;
        }
        public TutorialProgress GetProgress()
        {
            return progress_;
        }
        public void SetProgress(TutorialProgress value)
        {
            progress_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class tutorial_progress_update_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private TutorialProgress progress_;
        private static Yippee.Net.TypeInfo tutorial_progress_update_ansTypeInfo_ = new Yippee.Net.TypeInfo(0x186F133, "protocol.tutorial_progress_update_ans");

        public tutorial_progress_update_ans()
        {
        }
        public tutorial_progress_update_ans(tutorial_progress_update_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return tutorial_progress_update_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new tutorial_progress_update_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new tutorial_progress_update_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // progress
            progress_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // progress
            totalSize += sizeof(int);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((tutorial_progress_update_ans)from);
        }
        public void CopyFrom(tutorial_progress_update_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((tutorial_progress_update_ans)from);
        }
        public void MergeFrom(tutorial_progress_update_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // progress
            SetProgress(from.GetProgress());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // progress
            {
                int value = (int)progress_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // progress
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                progress_ = (TutorialProgress)value;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public TutorialProgress GetProgress()
        {
            return progress_;
        }
        public void SetProgress(TutorialProgress value)
        {
            progress_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class first_vehicle_select_req : Yippee.Net.IObjectBase
    {
        private int selectedVehicleNo_;
        private static Yippee.Net.TypeInfo first_vehicle_select_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xD527521, "protocol.first_vehicle_select_req");

        public first_vehicle_select_req()
        {
        }
        public first_vehicle_select_req(first_vehicle_select_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return first_vehicle_select_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new first_vehicle_select_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new first_vehicle_select_req(this);
        }
        public void Clear()
        {
            // selectedVehicleNo
            selectedVehicleNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // selectedVehicleNo
            totalSize += Yippee.Net.Internal.Size(selectedVehicleNo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((first_vehicle_select_req)from);
        }
        public void CopyFrom(first_vehicle_select_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((first_vehicle_select_req)from);
        }
        public void MergeFrom(first_vehicle_select_req from)
        {
            if (from == this)
            {
                return;
            }

            // selectedVehicleNo
            SetSelectedVehicleNo(from.GetSelectedVehicleNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // selectedVehicleNo
            if (Yippee.Net.Internal.Serialize(output, selectedVehicleNo_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // selectedVehicleNo
            if (Yippee.Net.Internal.Deserialize(input, out selectedVehicleNo_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetSelectedVehicleNo()
        {
            return selectedVehicleNo_;
        }
        public void SetSelectedVehicleNo(int value)
        {
            selectedVehicleNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class first_vehicle_select_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private vehicle selectedVehicle_ = new vehicle();
        private static Yippee.Net.TypeInfo first_vehicle_select_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xD524BB3, "protocol.first_vehicle_select_ans");

        public first_vehicle_select_ans()
        {
        }
        public first_vehicle_select_ans(first_vehicle_select_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return first_vehicle_select_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new first_vehicle_select_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new first_vehicle_select_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // selectedVehicle
            selectedVehicle_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // selectedVehicle
            totalSize += Yippee.Net.Internal.Size(selectedVehicle_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((first_vehicle_select_ans)from);
        }
        public void CopyFrom(first_vehicle_select_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((first_vehicle_select_ans)from);
        }
        public void MergeFrom(first_vehicle_select_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // selectedVehicle
            SetSelectedVehicle(from.GetSelectedVehicle());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // selectedVehicle
            if (selectedVehicle_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // selectedVehicle
            if (selectedVehicle_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public vehicle GetSelectedVehicle()
        {
            return selectedVehicle_;
        }
        public void SetSelectedVehicle(vehicle value)
        {
            selectedVehicle_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class asset_info_req : Yippee.Net.IObjectBase
    {
        private ulong playerNo_;
        private static Yippee.Net.TypeInfo asset_info_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xBBB4F11, "protocol.asset_info_req");

        public asset_info_req()
        {
        }
        public asset_info_req(asset_info_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return asset_info_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new asset_info_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new asset_info_req(this);
        }
        public void Clear()
        {
            // playerNo
            playerNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // playerNo
            totalSize += Yippee.Net.Internal.Size(playerNo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((asset_info_req)from);
        }
        public void CopyFrom(asset_info_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((asset_info_req)from);
        }
        public void MergeFrom(asset_info_req from)
        {
            if (from == this)
            {
                return;
            }

            // playerNo
            SetPlayerNo(from.GetPlayerNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // playerNo
            if (Yippee.Net.Internal.Serialize(output, playerNo_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // playerNo
            if (Yippee.Net.Internal.Deserialize(input, out playerNo_) == false)
            {
                return false;
            }

            return true;
        }
        public ulong GetPlayerNo()
        {
            return playerNo_;
        }
        public void SetPlayerNo(ulong value)
        {
            playerNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class asset_info_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private asset_info info_ = new asset_info();
        private static Yippee.Net.TypeInfo asset_info_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xBBB7183, "protocol.asset_info_ans");

        public asset_info_ans()
        {
        }
        public asset_info_ans(asset_info_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return asset_info_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new asset_info_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new asset_info_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // info
            info_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // info
            totalSize += Yippee.Net.Internal.Size(info_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((asset_info_ans)from);
        }
        public void CopyFrom(asset_info_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((asset_info_ans)from);
        }
        public void MergeFrom(asset_info_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // info
            SetInfo(from.GetInfo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // info
            if (info_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // info
            if (info_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public asset_info GetInfo()
        {
            return info_;
        }
        public void SetInfo(asset_info value)
        {
            info_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class match_item_buy_req : Yippee.Net.IObjectBase
    {
        private int itemId_;
        private static Yippee.Net.TypeInfo match_item_buy_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xE4A92F1, "protocol.match_item_buy_req");

        public match_item_buy_req()
        {
        }
        public match_item_buy_req(match_item_buy_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return match_item_buy_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new match_item_buy_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new match_item_buy_req(this);
        }
        public void Clear()
        {
            // itemId
            itemId_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // itemId
            totalSize += Yippee.Net.Internal.Size(itemId_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((match_item_buy_req)from);
        }
        public void CopyFrom(match_item_buy_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((match_item_buy_req)from);
        }
        public void MergeFrom(match_item_buy_req from)
        {
            if (from == this)
            {
                return;
            }

            // itemId
            SetItemId(from.GetItemId());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // itemId
            if (Yippee.Net.Internal.Serialize(output, itemId_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // itemId
            if (Yippee.Net.Internal.Deserialize(input, out itemId_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetItemId()
        {
            return itemId_;
        }
        public void SetItemId(int value)
        {
            itemId_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class match_item_buy_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private match_item_info updatedMatchItems_ = new match_item_info();
        private asset_info updatedAssetInfo_ = new asset_info();
        private static Yippee.Net.TypeInfo match_item_buy_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xE4AAE63, "protocol.match_item_buy_ans");

        public match_item_buy_ans()
        {
        }
        public match_item_buy_ans(match_item_buy_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return match_item_buy_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new match_item_buy_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new match_item_buy_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // updatedMatchItems
            updatedMatchItems_.Clear();
            // updatedAssetInfo
            updatedAssetInfo_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // updatedMatchItems
            totalSize += Yippee.Net.Internal.Size(updatedMatchItems_);
            // updatedAssetInfo
            totalSize += Yippee.Net.Internal.Size(updatedAssetInfo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((match_item_buy_ans)from);
        }
        public void CopyFrom(match_item_buy_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((match_item_buy_ans)from);
        }
        public void MergeFrom(match_item_buy_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // updatedMatchItems
            SetUpdatedMatchItems(from.GetUpdatedMatchItems());
            // updatedAssetInfo
            SetUpdatedAssetInfo(from.GetUpdatedAssetInfo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // updatedMatchItems
            if (updatedMatchItems_.Serialize(stream) == false)
            {
                return false;
            }
            // updatedAssetInfo
            if (updatedAssetInfo_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // updatedMatchItems
            if (updatedMatchItems_.Deserialize(stream) == false)
            {
                return false;
            }
            // updatedAssetInfo
            if (updatedAssetInfo_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public match_item_info GetUpdatedMatchItems()
        {
            return updatedMatchItems_;
        }
        public void SetUpdatedMatchItems(match_item_info value)
        {
            updatedMatchItems_ = value;
        }
        public asset_info GetUpdatedAssetInfo()
        {
            return updatedAssetInfo_;
        }
        public void SetUpdatedAssetInfo(asset_info value)
        {
            updatedAssetInfo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class match_info_req : Yippee.Net.IObjectBase
    {
        private GameMode mode_;
        private static Yippee.Net.TypeInfo match_info_reqTypeInfo_ = new Yippee.Net.TypeInfo(0x9B00E41, "protocol.match_info_req");

        public match_info_req()
        {
        }
        public match_info_req(match_info_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return match_info_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new match_info_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new match_info_req(this);
        }
        public void Clear()
        {
            // mode
            mode_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // mode
            totalSize += sizeof(int);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((match_info_req)from);
        }
        public void CopyFrom(match_info_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((match_info_req)from);
        }
        public void MergeFrom(match_info_req from)
        {
            if (from == this)
            {
                return;
            }

            // mode
            SetMode(from.GetMode());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // mode
            {
                int value = (int)mode_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // mode
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                mode_ = (GameMode)value;
            }

            return true;
        }
        public GameMode GetMode()
        {
            return mode_;
        }
        public void SetMode(GameMode value)
        {
            mode_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class match_info_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private vehicle[] available_ = new vehicle[0];
        private vehicle[] restricted_ = new vehicle[0];
        private match_item_info matchItems_ = new match_item_info();
        private static Yippee.Net.TypeInfo match_info_ansTypeInfo_ = new Yippee.Net.TypeInfo(0x9B032D3, "protocol.match_info_ans");

        public match_info_ans()
        {
        }
        public match_info_ans(match_info_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return match_info_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new match_info_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new match_info_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // available
            Array.Resize(ref available_, 0);
            // restricted
            Array.Resize(ref restricted_, 0);
            // matchItems
            matchItems_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // available
            totalSize += sizeof(uint);
            for (uint i = 0; i != available_.Length; ++i)
            {
                totalSize += Yippee.Net.Internal.Size(available_[i]);
            }
            // restricted
            totalSize += sizeof(uint);
            for (uint i = 0; i != restricted_.Length; ++i)
            {
                totalSize += Yippee.Net.Internal.Size(restricted_[i]);
            }
            // matchItems
            totalSize += Yippee.Net.Internal.Size(matchItems_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((match_info_ans)from);
        }
        public void CopyFrom(match_info_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((match_info_ans)from);
        }
        public void MergeFrom(match_info_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // available
            int availableLength = available_.Length;
            Array.Resize(ref available_, availableLength + from.available_.Length);
            Array.Copy(from.available_, 0, available_, availableLength, from.available_.Length);
            // restricted
            int restrictedLength = restricted_.Length;
            Array.Resize(ref restricted_, restrictedLength + from.restricted_.Length);
            Array.Copy(from.restricted_, 0, restricted_, restrictedLength, from.restricted_.Length);
            // matchItems
            SetMatchItems(from.GetMatchItems());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // available
            uint availableLength = (uint)available_.Length;
            if (Yippee.Net.Internal.Serialize(output, availableLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < availableLength; ++i)
            {
                if (available_[i].Serialize(stream) == false)
                {
                    return false;
                }
            }
            // restricted
            uint restrictedLength = (uint)restricted_.Length;
            if (Yippee.Net.Internal.Serialize(output, restrictedLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < restrictedLength; ++i)
            {
                if (restricted_[i].Serialize(stream) == false)
                {
                    return false;
                }
            }
            // matchItems
            if (matchItems_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // available
            uint availableLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out availableLength) == false)
            {
                return false;
            }
            Array.Resize(ref available_, (int)availableLength);
            for (uint i = 0; i < availableLength; ++i)
            {
                vehicle newAvailable = new vehicle();
                if (newAvailable.Deserialize(stream) == false)
                {
                    return false;
                }
                available_[i] = newAvailable;
            }
            // restricted
            uint restrictedLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out restrictedLength) == false)
            {
                return false;
            }
            Array.Resize(ref restricted_, (int)restrictedLength);
            for (uint i = 0; i < restrictedLength; ++i)
            {
                vehicle newRestricted = new vehicle();
                if (newRestricted.Deserialize(stream) == false)
                {
                    return false;
                }
                restricted_[i] = newRestricted;
            }
            // matchItems
            if (matchItems_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public vehicle[] GetAvailable()
        {
            return available_;
        }
        public vehicle GetAvailable(int index)
        {
            return available_[index];
        }
        public void SetAvailable(vehicle[] available)
        {
            available_ = available;
        }
        public void AddAvailable(vehicle available)
        {
            Array.Resize(ref available_, available_.Length + 1);
            available_[available_.Length - 1] = available;
        }
        public void RemoveAvailable(vehicle available)
        {
            int i = 0;
            for (; i < available_.Length; ++i)
            {
                if (available_[i] == available)
                {
                    break;
                }
            }
            if (i == available_.Length)
            {
                return;
            }
            for (; i < available_.Length - 1; ++i)
            {
                available_[i] = available_[i+1];
            }
            Array.Resize(ref available_, available_.Length - 1);
        }
        public vehicle[] GetRestricted()
        {
            return restricted_;
        }
        public vehicle GetRestricted(int index)
        {
            return restricted_[index];
        }
        public void SetRestricted(vehicle[] restricted)
        {
            restricted_ = restricted;
        }
        public void AddRestricted(vehicle restricted)
        {
            Array.Resize(ref restricted_, restricted_.Length + 1);
            restricted_[restricted_.Length - 1] = restricted;
        }
        public void RemoveRestricted(vehicle restricted)
        {
            int i = 0;
            for (; i < restricted_.Length; ++i)
            {
                if (restricted_[i] == restricted)
                {
                    break;
                }
            }
            if (i == restricted_.Length)
            {
                return;
            }
            for (; i < restricted_.Length - 1; ++i)
            {
                restricted_[i] = restricted_[i+1];
            }
            Array.Resize(ref restricted_, restricted_.Length - 1);
        }
        public match_item_info GetMatchItems()
        {
            return matchItems_;
        }
        public void SetMatchItems(match_item_info value)
        {
            matchItems_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class match_start_req : Yippee.Net.IObjectBase
    {
        private GameMode mode_;
        private match_item_info usingMatchItems_ = new match_item_info();
        private static Yippee.Net.TypeInfo match_start_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xD303AB1, "protocol.match_start_req");

        public match_start_req()
        {
        }
        public match_start_req(match_start_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return match_start_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new match_start_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new match_start_req(this);
        }
        public void Clear()
        {
            // mode
            mode_ = 0;
            // usingMatchItems
            usingMatchItems_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // mode
            totalSize += sizeof(int);
            // usingMatchItems
            totalSize += Yippee.Net.Internal.Size(usingMatchItems_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((match_start_req)from);
        }
        public void CopyFrom(match_start_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((match_start_req)from);
        }
        public void MergeFrom(match_start_req from)
        {
            if (from == this)
            {
                return;
            }

            // mode
            SetMode(from.GetMode());
            // usingMatchItems
            SetUsingMatchItems(from.GetUsingMatchItems());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // mode
            {
                int value = (int)mode_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }
            // usingMatchItems
            if (usingMatchItems_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // mode
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                mode_ = (GameMode)value;
            }
            // usingMatchItems
            if (usingMatchItems_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public GameMode GetMode()
        {
            return mode_;
        }
        public void SetMode(GameMode value)
        {
            mode_ = value;
        }
        public match_item_info GetUsingMatchItems()
        {
            return usingMatchItems_;
        }
        public void SetUsingMatchItems(match_item_info value)
        {
            usingMatchItems_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class match_start_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private int estimatedSec_;
        private static Yippee.Net.TypeInfo match_start_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xD300623, "protocol.match_start_ans");

        public match_start_ans()
        {
        }
        public match_start_ans(match_start_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return match_start_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new match_start_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new match_start_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // estimatedSec
            estimatedSec_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // estimatedSec
            totalSize += Yippee.Net.Internal.Size(estimatedSec_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((match_start_ans)from);
        }
        public void CopyFrom(match_start_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((match_start_ans)from);
        }
        public void MergeFrom(match_start_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // estimatedSec
            SetEstimatedSec(from.GetEstimatedSec());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // estimatedSec
            if (Yippee.Net.Internal.Serialize(output, estimatedSec_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // estimatedSec
            if (Yippee.Net.Internal.Deserialize(input, out estimatedSec_) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public int GetEstimatedSec()
        {
            return estimatedSec_;
        }
        public void SetEstimatedSec(int value)
        {
            estimatedSec_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class match_stop_req : Yippee.Net.IObjectBase
    {
        private GameMode mode_;
        private static Yippee.Net.TypeInfo match_stop_reqTypeInfo_ = new Yippee.Net.TypeInfo(0x83F0DE1, "protocol.match_stop_req");

        public match_stop_req()
        {
        }
        public match_stop_req(match_stop_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return match_stop_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new match_stop_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new match_stop_req(this);
        }
        public void Clear()
        {
            // mode
            mode_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // mode
            totalSize += sizeof(int);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((match_stop_req)from);
        }
        public void CopyFrom(match_stop_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((match_stop_req)from);
        }
        public void MergeFrom(match_stop_req from)
        {
            if (from == this)
            {
                return;
            }

            // mode
            SetMode(from.GetMode());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // mode
            {
                int value = (int)mode_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // mode
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                mode_ = (GameMode)value;
            }

            return true;
        }
        public GameMode GetMode()
        {
            return mode_;
        }
        public void SetMode(GameMode value)
        {
            mode_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class match_stop_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private static Yippee.Net.TypeInfo match_stop_ansTypeInfo_ = new Yippee.Net.TypeInfo(0x83F3373, "protocol.match_stop_ans");

        public match_stop_ans()
        {
        }
        public match_stop_ans(match_stop_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return match_stop_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new match_stop_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new match_stop_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((match_stop_ans)from);
        }
        public void CopyFrom(match_stop_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((match_stop_ans)from);
        }
        public void MergeFrom(match_stop_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class match_complete_notify : Yippee.Net.IObjectBase
    {
        private short result_;
        private GameMode mode_;
        private int mapNo_;
        private bool useStandalone_;
        private server_address psAddr_ = new server_address();
        private Dictionary<ulong, player_profile_info> profiles_ = new Dictionary<ulong, player_profile_info>();
        private Dictionary<ulong, vehicle> vehicles_ = new Dictionary<ulong, vehicle>();
        private Dictionary<ulong, ability_slot> equippedAbility_ = new Dictionary<ulong, ability_slot>();
        private Dictionary<ulong, ability_list> abilities_ = new Dictionary<ulong, ability_list>();
        private static Yippee.Net.TypeInfo match_complete_notifyTypeInfo_ = new Yippee.Net.TypeInfo(0x5B20799, "protocol.match_complete_notify");

        public match_complete_notify()
        {
        }
        public match_complete_notify(match_complete_notify from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return match_complete_notifyTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new match_complete_notify();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new match_complete_notify(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // mode
            mode_ = 0;
            // mapNo
            mapNo_ = 0;
            // useStandalone
            useStandalone_ = false;
            // psAddr
            psAddr_.Clear();
            // profiles
            profiles_.Clear();
            // vehicles
            vehicles_.Clear();
            // equippedAbility
            equippedAbility_.Clear();
            // abilities
            abilities_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // mode
            totalSize += sizeof(int);
            // mapNo
            totalSize += Yippee.Net.Internal.Size(mapNo_);
            // useStandalone
            totalSize += Yippee.Net.Internal.Size(useStandalone_);
            // psAddr
            totalSize += Yippee.Net.Internal.Size(psAddr_);
            // profiles
            totalSize += sizeof(uint);
            totalSize += sizeof(ulong) * profiles_.Count;
            foreach (KeyValuePair<ulong, player_profile_info> pair in profiles_)
            {
                totalSize += Yippee.Net.Internal.Size(pair.Value);
            }
            // vehicles
            totalSize += sizeof(uint);
            totalSize += sizeof(ulong) * vehicles_.Count;
            foreach (KeyValuePair<ulong, vehicle> pair in vehicles_)
            {
                totalSize += Yippee.Net.Internal.Size(pair.Value);
            }
            // equippedAbility
            totalSize += sizeof(uint);
            totalSize += sizeof(ulong) * equippedAbility_.Count;
            foreach (KeyValuePair<ulong, ability_slot> pair in equippedAbility_)
            {
                totalSize += Yippee.Net.Internal.Size(pair.Value);
            }
            // abilities
            totalSize += sizeof(uint);
            totalSize += sizeof(ulong) * abilities_.Count;
            foreach (KeyValuePair<ulong, ability_list> pair in abilities_)
            {
                totalSize += Yippee.Net.Internal.Size(pair.Value);
            }

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((match_complete_notify)from);
        }
        public void CopyFrom(match_complete_notify from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((match_complete_notify)from);
        }
        public void MergeFrom(match_complete_notify from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // mode
            SetMode(from.GetMode());
            // mapNo
            SetMapNo(from.GetMapNo());
            // useStandalone
            SetUseStandalone(from.GetUseStandalone());
            // psAddr
            SetPsAddr(from.GetPsAddr());
            // profiles
            foreach (KeyValuePair<ulong, player_profile_info> pair in from.GetProfiles())
            {
                SetProfiles(pair.Key, pair.Value);
            }
            // vehicles
            foreach (KeyValuePair<ulong, vehicle> pair in from.GetVehicles())
            {
                SetVehicles(pair.Key, pair.Value);
            }
            // equippedAbility
            foreach (KeyValuePair<ulong, ability_slot> pair in from.GetEquippedAbility())
            {
                SetEquippedAbility(pair.Key, pair.Value);
            }
            // abilities
            foreach (KeyValuePair<ulong, ability_list> pair in from.GetAbilities())
            {
                SetAbilities(pair.Key, pair.Value);
            }
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // mode
            {
                int value = (int)mode_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }
            // mapNo
            if (Yippee.Net.Internal.Serialize(output, mapNo_) == false)
            {
                return false;
            }
            // useStandalone
            if (Yippee.Net.Internal.Serialize(output, useStandalone_) == false)
            {
                return false;
            }
            // psAddr
            if (psAddr_.Serialize(stream) == false)
            {
                return false;
            }
            // profiles
            uint profilesLength = (uint)profiles_.Count;
            if (Yippee.Net.Internal.Serialize(output, profilesLength) == false)
            {
                return false;
            }
            foreach (KeyValuePair<ulong, player_profile_info> pair in profiles_)
            {
                if (Yippee.Net.Internal.Serialize(output, pair.Key) == false)
                {
                    return false;
                }
                if (Yippee.Net.Internal.Serialize(output, pair.Value) == false)
                {
                    return false;
                }
            }
            // vehicles
            uint vehiclesLength = (uint)vehicles_.Count;
            if (Yippee.Net.Internal.Serialize(output, vehiclesLength) == false)
            {
                return false;
            }
            foreach (KeyValuePair<ulong, vehicle> pair in vehicles_)
            {
                if (Yippee.Net.Internal.Serialize(output, pair.Key) == false)
                {
                    return false;
                }
                if (Yippee.Net.Internal.Serialize(output, pair.Value) == false)
                {
                    return false;
                }
            }
            // equippedAbility
            uint equippedAbilityLength = (uint)equippedAbility_.Count;
            if (Yippee.Net.Internal.Serialize(output, equippedAbilityLength) == false)
            {
                return false;
            }
            foreach (KeyValuePair<ulong, ability_slot> pair in equippedAbility_)
            {
                if (Yippee.Net.Internal.Serialize(output, pair.Key) == false)
                {
                    return false;
                }
                if (Yippee.Net.Internal.Serialize(output, pair.Value) == false)
                {
                    return false;
                }
            }
            // abilities
            uint abilitiesLength = (uint)abilities_.Count;
            if (Yippee.Net.Internal.Serialize(output, abilitiesLength) == false)
            {
                return false;
            }
            foreach (KeyValuePair<ulong, ability_list> pair in abilities_)
            {
                if (Yippee.Net.Internal.Serialize(output, pair.Key) == false)
                {
                    return false;
                }
                if (Yippee.Net.Internal.Serialize(output, pair.Value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // mode
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                mode_ = (GameMode)value;
            }
            // mapNo
            if (Yippee.Net.Internal.Deserialize(input, out mapNo_) == false)
            {
                return false;
            }
            // useStandalone
            if (Yippee.Net.Internal.Deserialize(input, out useStandalone_) == false)
            {
                return false;
            }
            // psAddr
            if (psAddr_.Deserialize(stream) == false)
            {
                return false;
            }
            // profiles
            uint profilesLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out profilesLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < profilesLength; ++i)
            {
                ulong key;
                if (Yippee.Net.Internal.Deserialize(input, out key) == false)
                {
                    return false;
                }
                player_profile_info value = new player_profile_info();
                if (Yippee.Net.Internal.Deserialize(input, value) == false)
                {
                    return false;
                }
                SetProfiles(key, value);
            }
            // vehicles
            uint vehiclesLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out vehiclesLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < vehiclesLength; ++i)
            {
                ulong key;
                if (Yippee.Net.Internal.Deserialize(input, out key) == false)
                {
                    return false;
                }
                vehicle value = new vehicle();
                if (Yippee.Net.Internal.Deserialize(input, value) == false)
                {
                    return false;
                }
                SetVehicles(key, value);
            }
            // equippedAbility
            uint equippedAbilityLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out equippedAbilityLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < equippedAbilityLength; ++i)
            {
                ulong key;
                if (Yippee.Net.Internal.Deserialize(input, out key) == false)
                {
                    return false;
                }
                ability_slot value = new ability_slot();
                if (Yippee.Net.Internal.Deserialize(input, value) == false)
                {
                    return false;
                }
                SetEquippedAbility(key, value);
            }
            // abilities
            uint abilitiesLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out abilitiesLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < abilitiesLength; ++i)
            {
                ulong key;
                if (Yippee.Net.Internal.Deserialize(input, out key) == false)
                {
                    return false;
                }
                ability_list value = new ability_list();
                if (Yippee.Net.Internal.Deserialize(input, value) == false)
                {
                    return false;
                }
                SetAbilities(key, value);
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public GameMode GetMode()
        {
            return mode_;
        }
        public void SetMode(GameMode value)
        {
            mode_ = value;
        }
        public int GetMapNo()
        {
            return mapNo_;
        }
        public void SetMapNo(int value)
        {
            mapNo_ = value;
        }
        public bool GetUseStandalone()
        {
            return useStandalone_;
        }
        public void SetUseStandalone(bool value)
        {
            useStandalone_ = value;
        }
        public server_address GetPsAddr()
        {
            return psAddr_;
        }
        public void SetPsAddr(server_address value)
        {
            psAddr_ = value;
        }
        public Dictionary<ulong, player_profile_info> GetProfiles()
        {
            return profiles_;
        }
        public bool GetProfiles(ulong key, out player_profile_info value)
        {
            return profiles_.TryGetValue(key, out value);
        }
        public player_profile_info GetProfiles(ulong key)
        {
            player_profile_info ret;
            profiles_.TryGetValue(key, out ret);
            return ret;
        }
        public void SetProfiles(ulong key, player_profile_info value)
        {
            profiles_[key] = value;
        }
        public Dictionary<ulong, vehicle> GetVehicles()
        {
            return vehicles_;
        }
        public bool GetVehicles(ulong key, out vehicle value)
        {
            return vehicles_.TryGetValue(key, out value);
        }
        public vehicle GetVehicles(ulong key)
        {
            vehicle ret;
            vehicles_.TryGetValue(key, out ret);
            return ret;
        }
        public void SetVehicles(ulong key, vehicle value)
        {
            vehicles_[key] = value;
        }
        public Dictionary<ulong, ability_slot> GetEquippedAbility()
        {
            return equippedAbility_;
        }
        public bool GetEquippedAbility(ulong key, out ability_slot value)
        {
            return equippedAbility_.TryGetValue(key, out value);
        }
        public ability_slot GetEquippedAbility(ulong key)
        {
            ability_slot ret;
            equippedAbility_.TryGetValue(key, out ret);
            return ret;
        }
        public void SetEquippedAbility(ulong key, ability_slot value)
        {
            equippedAbility_[key] = value;
        }
        public Dictionary<ulong, ability_list> GetAbilities()
        {
            return abilities_;
        }
        public bool GetAbilities(ulong key, out ability_list value)
        {
            return abilities_.TryGetValue(key, out value);
        }
        public ability_list GetAbilities(ulong key)
        {
            ability_list ret;
            abilities_.TryGetValue(key, out ret);
            return ret;
        }
        public void SetAbilities(ulong key, ability_list value)
        {
            abilities_[key] = value;
        }
    }
    // ------------------------------------------------------------------------------------------------


}	// namespace protocol