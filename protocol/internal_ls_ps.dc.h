// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_INTERNAL_LS_PS_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_INTERNAL_LS_PS_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>

#include "common_def.dc.h"
#include "player.dc.h"
#include "vehicle.dc.h"
#include "ability.dc.h"

namespace protocol
{

class internal_register_ps_req;
class internal_register_ps_ans;
class player_requisite_info;
class internal_start_game_req;
class internal_start_game_ans;
class internal_player_end_game_report_req;
class internal_player_end_game_report_ans;
class internal_end_game_req;
class internal_end_game_ans;

// ================================================================================================

class internal_register_ps_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t ps_no_;

public:
    internal_register_ps_req(void);
    internal_register_ps_req(const internal_register_ps_req& from);
    virtual ~internal_register_ps_req(void);

    inline internal_register_ps_req& operator=(const internal_register_ps_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_register_ps_req* new_instance(void) const;
    virtual internal_register_ps_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_register_ps_req& from);
    void merge_from(const internal_register_ps_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // ps_no
    SpringCat::int32_t get_ps_no(void) const;
    void set_ps_no(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_register_ps_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int16_t result_;

public:
    internal_register_ps_ans(void);
    internal_register_ps_ans(const internal_register_ps_ans& from);
    virtual ~internal_register_ps_ans(void);

    inline internal_register_ps_ans& operator=(const internal_register_ps_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_register_ps_ans* new_instance(void) const;
    virtual internal_register_ps_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_register_ps_ans& from);
    void merge_from(const internal_register_ps_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------

class player_requisite_info : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<6> __has_bits__;

private:
    bool is_ai_;
    std::auto_ptr<player_profile_info> profile_;
    std::auto_ptr<vehicle> selected_car_;
    std::auto_ptr<ability_slot> equipped_ability_;
    std::auto_ptr<ability_list> abilities_;
    std::auto_ptr<match_item_info> match_items_;

public:
    player_requisite_info(void);
    player_requisite_info(const player_requisite_info& from);
    virtual ~player_requisite_info(void);

    inline player_requisite_info& operator=(const player_requisite_info& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual player_requisite_info* new_instance(void) const;
    virtual player_requisite_info* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const player_requisite_info& from);
    void merge_from(const player_requisite_info& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // is_ai
    bool get_is_ai(void) const;
    void set_is_ai(bool value);

    // profile
    const player_profile_info* get_profile(void) const;
    player_profile_info* get_mutable_profile(void);

    // selected_car
    const vehicle* get_selected_car(void) const;
    vehicle* get_mutable_selected_car(void);

    // equipped_ability
    const ability_slot* get_equipped_ability(void) const;
    ability_slot* get_mutable_equipped_ability(void);

    // abilities
    const ability_list* get_abilities(void) const;
    ability_list* get_mutable_abilities(void);

    // match_items
    const match_item_info* get_match_items(void) const;
    match_item_info* get_mutable_match_items(void);
};
// ------------------------------------------------------------------------------------------------

class internal_start_game_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    std::map<SpringCat::uint64_t, player_requisite_info*> player_infos_;

public:
    internal_start_game_req(void);
    internal_start_game_req(const internal_start_game_req& from);
    virtual ~internal_start_game_req(void);

    inline internal_start_game_req& operator=(const internal_start_game_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_start_game_req* new_instance(void) const;
    virtual internal_start_game_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_start_game_req& from);
    void merge_from(const internal_start_game_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // player_infos
    const std::map<SpringCat::uint64_t, player_requisite_info*>& get_player_infos(void) const;
    std::map<SpringCat::uint64_t, player_requisite_info*>* get_mutable_player_infos(void);
    const player_requisite_info* get_player_infos(SpringCat::uint64_t key) const;
    player_requisite_info* get_mutable_player_infos(SpringCat::uint64_t key);
    player_requisite_info* insert_player_infos(SpringCat::uint64_t key);
};
// ------------------------------------------------------------------------------------------------

class internal_start_game_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int16_t result_;

public:
    internal_start_game_ans(void);
    internal_start_game_ans(const internal_start_game_ans& from);
    virtual ~internal_start_game_ans(void);

    inline internal_start_game_ans& operator=(const internal_start_game_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_start_game_ans* new_instance(void) const;
    virtual internal_start_game_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_start_game_ans& from);
    void merge_from(const internal_start_game_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_player_end_game_report_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<7> __has_bits__;

private:
    SpringCat::uint64_t player_no_;
    SpringCat::int32_t using_vehicle_no_;
    bool giveup_game_;
    SpringCat::int8_t final_rank_;
    SpringCat::int16_t inc_game_money_;
    SpringCat::int16_t inc_player_exp_;
    std::map<record_data_key, SpringCat::int32_t> play_data_;

public:
    internal_player_end_game_report_req(void);
    internal_player_end_game_report_req(const internal_player_end_game_report_req& from);
    virtual ~internal_player_end_game_report_req(void);

    inline internal_player_end_game_report_req& operator=(const internal_player_end_game_report_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_player_end_game_report_req* new_instance(void) const;
    virtual internal_player_end_game_report_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_player_end_game_report_req& from);
    void merge_from(const internal_player_end_game_report_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);

    // using_vehicle_no
    SpringCat::int32_t get_using_vehicle_no(void) const;
    void set_using_vehicle_no(SpringCat::int32_t value);

    // giveup_game
    bool get_giveup_game(void) const;
    void set_giveup_game(bool value);

    // final_rank
    SpringCat::int8_t get_final_rank(void) const;
    void set_final_rank(SpringCat::int8_t value);

    // inc_game_money
    SpringCat::int16_t get_inc_game_money(void) const;
    void set_inc_game_money(SpringCat::int16_t value);

    // inc_player_exp
    SpringCat::int16_t get_inc_player_exp(void) const;
    void set_inc_player_exp(SpringCat::int16_t value);

    // play_data
    const std::map<record_data_key, SpringCat::int32_t>& get_play_data(void) const;
    std::map<record_data_key, SpringCat::int32_t>* get_mutable_play_data(void);
    bool get_play_data(record_data_key key, SpringCat::int32_t* value) const;
    void set_play_data(record_data_key key, SpringCat::int32_t value);
    bool insert_play_data(record_data_key key, SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_player_end_game_report_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<5> __has_bits__;

private:
    SpringCat::uint64_t player_no_;
    bool giveup_game_;
    SpringCat::int8_t final_rank_;
    SpringCat::int32_t first_acquired_stuff_id_;
    SpringCat::int32_t second_acquired_stuff_id_;

public:
    internal_player_end_game_report_ans(void);
    internal_player_end_game_report_ans(const internal_player_end_game_report_ans& from);
    virtual ~internal_player_end_game_report_ans(void);

    inline internal_player_end_game_report_ans& operator=(const internal_player_end_game_report_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_player_end_game_report_ans* new_instance(void) const;
    virtual internal_player_end_game_report_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_player_end_game_report_ans& from);
    void merge_from(const internal_player_end_game_report_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // player_no
    SpringCat::uint64_t get_player_no(void) const;
    void set_player_no(SpringCat::uint64_t value);

    // giveup_game
    bool get_giveup_game(void) const;
    void set_giveup_game(bool value);

    // final_rank
    SpringCat::int8_t get_final_rank(void) const;
    void set_final_rank(SpringCat::int8_t value);

    // first_acquired_stuff_id
    SpringCat::int32_t get_first_acquired_stuff_id(void) const;
    void set_first_acquired_stuff_id(SpringCat::int32_t value);

    // second_acquired_stuff_id
    SpringCat::int32_t get_second_acquired_stuff_id(void) const;
    void set_second_acquired_stuff_id(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_end_game_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int32_t ps_no_;

public:
    internal_end_game_req(void);
    internal_end_game_req(const internal_end_game_req& from);
    virtual ~internal_end_game_req(void);

    inline internal_end_game_req& operator=(const internal_end_game_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_end_game_req* new_instance(void) const;
    virtual internal_end_game_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_end_game_req& from);
    void merge_from(const internal_end_game_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // ps_no
    SpringCat::int32_t get_ps_no(void) const;
    void set_ps_no(SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class internal_end_game_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<1> __has_bits__;

private:
    SpringCat::int16_t result_;

public:
    internal_end_game_ans(void);
    internal_end_game_ans(const internal_end_game_ans& from);
    virtual ~internal_end_game_ans(void);

    inline internal_end_game_ans& operator=(const internal_end_game_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual internal_end_game_ans* new_instance(void) const;
    virtual internal_end_game_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const internal_end_game_ans& from);
    void merge_from(const internal_end_game_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_INTERNAL_LS_PS_DC_INCLUDE__
