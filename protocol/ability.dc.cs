// Generated by the DRCat compiler. DO NOT EDIT!

using System.Collections.Generic;
using System.IO;
using System;


namespace protocol
{

    public enum ability_slot_no
    {
        SLOT_1 = 1,
        SLOT_2 = 2,
        SLOT_3 = 3,
    };	// enum ability_slot_no

    // ================================================================================================

    public class ability : Yippee.Net.IObjectBase
    {
        private int abilityId_;
        private short level_;
        private static Yippee.Net.TypeInfo abilityTypeInfo_ = new Yippee.Net.TypeInfo(0xCD11899, "protocol.ability");

        public ability()
        {
        }
        public ability(ability from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return abilityTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability(this);
        }
        public void Clear()
        {
            // abilityId
            abilityId_ = 0;
            // level
            level_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // abilityId
            totalSize += Yippee.Net.Internal.Size(abilityId_);
            // level
            totalSize += Yippee.Net.Internal.Size(level_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability)from);
        }
        public void CopyFrom(ability from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability)from);
        }
        public void MergeFrom(ability from)
        {
            if (from == this)
            {
                return;
            }

            // abilityId
            SetAbilityId(from.GetAbilityId());
            // level
            SetLevel(from.GetLevel());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // abilityId
            if (Yippee.Net.Internal.Serialize(output, abilityId_) == false)
            {
                return false;
            }
            // level
            if (Yippee.Net.Internal.Serialize(output, level_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // abilityId
            if (Yippee.Net.Internal.Deserialize(input, out abilityId_) == false)
            {
                return false;
            }
            // level
            if (Yippee.Net.Internal.Deserialize(input, out level_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetAbilityId()
        {
            return abilityId_;
        }
        public void SetAbilityId(int value)
        {
            abilityId_ = value;
        }
        public short GetLevel()
        {
            return level_;
        }
        public void SetLevel(short value)
        {
            level_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class ability_slot : Yippee.Net.IObjectBase
    {
        private Dictionary<ability_slot_no, int> slots_ = new Dictionary<ability_slot_no, int>();
        private static Yippee.Net.TypeInfo ability_slotTypeInfo_ = new Yippee.Net.TypeInfo(0x93B94E4, "protocol.ability_slot");

        public ability_slot()
        {
        }
        public ability_slot(ability_slot from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return ability_slotTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability_slot();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability_slot(this);
        }
        public void Clear()
        {
            // slots
            slots_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // slots
            totalSize += sizeof(uint);
            totalSize += sizeof(ability_slot_no) * slots_.Count;
            totalSize += sizeof(int) * slots_.Count;

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability_slot)from);
        }
        public void CopyFrom(ability_slot from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability_slot)from);
        }
        public void MergeFrom(ability_slot from)
        {
            if (from == this)
            {
                return;
            }

            // slots
            foreach (KeyValuePair<ability_slot_no, int> pair in from.GetSlots())
            {
                SetSlots(pair.Key, pair.Value);
            }
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // slots
            uint slotsLength = (uint)slots_.Count;
            if (Yippee.Net.Internal.Serialize(output, slotsLength) == false)
            {
                return false;
            }
            foreach (KeyValuePair<ability_slot_no, int> pair in slots_)
            {
                int key = (int)pair.Key;
                if (Yippee.Net.Internal.Serialize(output, key) == false)
                {
                    return false;
                }
                if (Yippee.Net.Internal.Serialize(output, pair.Value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // slots
            uint slotsLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out slotsLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < slotsLength; ++i)
            {
                int key;
                if (Yippee.Net.Internal.Deserialize(input, out key) == false)
                {
                    return false;
                }
                int value;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                SetSlots((ability_slot_no)key, value);
            }

            return true;
        }
        public Dictionary<ability_slot_no, int> GetSlots()
        {
            return slots_;
        }
        public bool GetSlots(ability_slot_no key, out int value)
        {
            return slots_.TryGetValue(key, out value);
        }
        public int GetSlots(ability_slot_no key)
        {
            int ret;
            slots_.TryGetValue(key, out ret);
            return ret;
        }
        public void SetSlots(ability_slot_no key, int value)
        {
            slots_[key] = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class ability_list : Yippee.Net.IObjectBase
    {
        private ability[] infos_ = new ability[0];
        private static Yippee.Net.TypeInfo ability_listTypeInfo_ = new Yippee.Net.TypeInfo(0x9394124, "protocol.ability_list");

        public ability_list()
        {
        }
        public ability_list(ability_list from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return ability_listTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability_list();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability_list(this);
        }
        public void Clear()
        {
            // infos
            Array.Resize(ref infos_, 0);
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // infos
            totalSize += sizeof(uint);
            for (uint i = 0; i != infos_.Length; ++i)
            {
                totalSize += Yippee.Net.Internal.Size(infos_[i]);
            }

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability_list)from);
        }
        public void CopyFrom(ability_list from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability_list)from);
        }
        public void MergeFrom(ability_list from)
        {
            if (from == this)
            {
                return;
            }

            // infos
            int infosLength = infos_.Length;
            Array.Resize(ref infos_, infosLength + from.infos_.Length);
            Array.Copy(from.infos_, 0, infos_, infosLength, from.infos_.Length);
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // infos
            uint infosLength = (uint)infos_.Length;
            if (Yippee.Net.Internal.Serialize(output, infosLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < infosLength; ++i)
            {
                if (infos_[i].Serialize(stream) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // infos
            uint infosLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out infosLength) == false)
            {
                return false;
            }
            Array.Resize(ref infos_, (int)infosLength);
            for (uint i = 0; i < infosLength; ++i)
            {
                ability newInfos = new ability();
                if (newInfos.Deserialize(stream) == false)
                {
                    return false;
                }
                infos_[i] = newInfos;
            }

            return true;
        }
        public ability[] GetInfos()
        {
            return infos_;
        }
        public ability GetInfos(int index)
        {
            return infos_[index];
        }
        public void SetInfos(ability[] infos)
        {
            infos_ = infos;
        }
        public void AddInfos(ability infos)
        {
            Array.Resize(ref infos_, infos_.Length + 1);
            infos_[infos_.Length - 1] = infos;
        }
        public void RemoveInfos(ability infos)
        {
            int i = 0;
            for (; i < infos_.Length; ++i)
            {
                if (infos_[i] == infos)
                {
                    break;
                }
            }
            if (i == infos_.Length)
            {
                return;
            }
            for (; i < infos_.Length - 1; ++i)
            {
                infos_[i] = infos_[i+1];
            }
            Array.Resize(ref infos_, infos_.Length - 1);
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class ability_list_req : Yippee.Net.IObjectBase
    {
        private static Yippee.Net.TypeInfo ability_list_reqTypeInfo_ = new Yippee.Net.TypeInfo(0x1215181, "protocol.ability_list_req");

        public ability_list_req()
        {
        }
        public ability_list_req(ability_list_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return ability_list_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability_list_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability_list_req(this);
        }
        public void Clear()
        {
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability_list_req)from);
        }
        public void CopyFrom(ability_list_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability_list_req)from);
        }
        public void MergeFrom(ability_list_req from)
        {
            if (from == this)
            {
                return;
            }
        }
        public bool Serialize(Stream stream)
        {
            return true;
        }
        public bool Deserialize(Stream stream)
        {
            return true;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class ability_list_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private ability_list infos_ = new ability_list();
        private ability_slot slot_ = new ability_slot();
        private static Yippee.Net.TypeInfo ability_list_ansTypeInfo_ = new Yippee.Net.TypeInfo(0x1216F13, "protocol.ability_list_ans");

        public ability_list_ans()
        {
        }
        public ability_list_ans(ability_list_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return ability_list_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability_list_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability_list_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // infos
            infos_.Clear();
            // slot
            slot_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // infos
            totalSize += Yippee.Net.Internal.Size(infos_);
            // slot
            totalSize += Yippee.Net.Internal.Size(slot_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability_list_ans)from);
        }
        public void CopyFrom(ability_list_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability_list_ans)from);
        }
        public void MergeFrom(ability_list_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // infos
            SetInfos(from.GetInfos());
            // slot
            SetSlot(from.GetSlot());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // infos
            if (infos_.Serialize(stream) == false)
            {
                return false;
            }
            // slot
            if (slot_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // infos
            if (infos_.Deserialize(stream) == false)
            {
                return false;
            }
            // slot
            if (slot_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public ability_list GetInfos()
        {
            return infos_;
        }
        public void SetInfos(ability_list value)
        {
            infos_ = value;
        }
        public ability_slot GetSlot()
        {
            return slot_;
        }
        public void SetSlot(ability_slot value)
        {
            slot_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class ability_slot_open_req : Yippee.Net.IObjectBase
    {
        private ability_slot_no slotNo_;
        private static Yippee.Net.TypeInfo ability_slot_open_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xE7F21, "protocol.ability_slot_open_req");

        public ability_slot_open_req()
        {
        }
        public ability_slot_open_req(ability_slot_open_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return ability_slot_open_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability_slot_open_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability_slot_open_req(this);
        }
        public void Clear()
        {
            // slotNo
            slotNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // slotNo
            totalSize += sizeof(int);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability_slot_open_req)from);
        }
        public void CopyFrom(ability_slot_open_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability_slot_open_req)from);
        }
        public void MergeFrom(ability_slot_open_req from)
        {
            if (from == this)
            {
                return;
            }

            // slotNo
            SetSlotNo(from.GetSlotNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // slotNo
            {
                int value = (int)slotNo_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // slotNo
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                slotNo_ = (ability_slot_no)value;
            }

            return true;
        }
        public ability_slot_no GetSlotNo()
        {
            return slotNo_;
        }
        public void SetSlotNo(ability_slot_no value)
        {
            slotNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class ability_slot_open_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private ability_slot updatedSlot_ = new ability_slot();
        private static Yippee.Net.TypeInfo ability_slot_open_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xE41B3, "protocol.ability_slot_open_ans");

        public ability_slot_open_ans()
        {
        }
        public ability_slot_open_ans(ability_slot_open_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return ability_slot_open_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability_slot_open_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability_slot_open_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // updatedSlot
            updatedSlot_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // updatedSlot
            totalSize += Yippee.Net.Internal.Size(updatedSlot_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability_slot_open_ans)from);
        }
        public void CopyFrom(ability_slot_open_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability_slot_open_ans)from);
        }
        public void MergeFrom(ability_slot_open_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // updatedSlot
            SetUpdatedSlot(from.GetUpdatedSlot());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // updatedSlot
            if (updatedSlot_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // updatedSlot
            if (updatedSlot_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public ability_slot GetUpdatedSlot()
        {
            return updatedSlot_;
        }
        public void SetUpdatedSlot(ability_slot value)
        {
            updatedSlot_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class ability_equip_req : Yippee.Net.IObjectBase
    {
        private int abilityId_;
        private ability_slot_no slotNo_;
        private static Yippee.Net.TypeInfo ability_equip_reqTypeInfo_ = new Yippee.Net.TypeInfo(0x497E551, "protocol.ability_equip_req");

        public ability_equip_req()
        {
        }
        public ability_equip_req(ability_equip_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return ability_equip_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability_equip_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability_equip_req(this);
        }
        public void Clear()
        {
            // abilityId
            abilityId_ = 0;
            // slotNo
            slotNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // abilityId
            totalSize += Yippee.Net.Internal.Size(abilityId_);
            // slotNo
            totalSize += sizeof(int);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability_equip_req)from);
        }
        public void CopyFrom(ability_equip_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability_equip_req)from);
        }
        public void MergeFrom(ability_equip_req from)
        {
            if (from == this)
            {
                return;
            }

            // abilityId
            SetAbilityId(from.GetAbilityId());
            // slotNo
            SetSlotNo(from.GetSlotNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // abilityId
            if (Yippee.Net.Internal.Serialize(output, abilityId_) == false)
            {
                return false;
            }
            // slotNo
            {
                int value = (int)slotNo_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // abilityId
            if (Yippee.Net.Internal.Deserialize(input, out abilityId_) == false)
            {
                return false;
            }
            // slotNo
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                slotNo_ = (ability_slot_no)value;
            }

            return true;
        }
        public int GetAbilityId()
        {
            return abilityId_;
        }
        public void SetAbilityId(int value)
        {
            abilityId_ = value;
        }
        public ability_slot_no GetSlotNo()
        {
            return slotNo_;
        }
        public void SetSlotNo(ability_slot_no value)
        {
            slotNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class ability_equip_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private ability_slot updatedSlot_ = new ability_slot();
        private static Yippee.Net.TypeInfo ability_equip_ansTypeInfo_ = new Yippee.Net.TypeInfo(0x497DBC3, "protocol.ability_equip_ans");

        public ability_equip_ans()
        {
        }
        public ability_equip_ans(ability_equip_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return ability_equip_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability_equip_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability_equip_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // updatedSlot
            updatedSlot_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // updatedSlot
            totalSize += Yippee.Net.Internal.Size(updatedSlot_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability_equip_ans)from);
        }
        public void CopyFrom(ability_equip_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability_equip_ans)from);
        }
        public void MergeFrom(ability_equip_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // updatedSlot
            SetUpdatedSlot(from.GetUpdatedSlot());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // updatedSlot
            if (updatedSlot_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // updatedSlot
            if (updatedSlot_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public ability_slot GetUpdatedSlot()
        {
            return updatedSlot_;
        }
        public void SetUpdatedSlot(ability_slot value)
        {
            updatedSlot_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class ability_acquire_req : Yippee.Net.IObjectBase
    {
        private int abilityId_;
        private static Yippee.Net.TypeInfo ability_acquire_reqTypeInfo_ = new Yippee.Net.TypeInfo(0x30DD8F1, "protocol.ability_acquire_req");

        public ability_acquire_req()
        {
        }
        public ability_acquire_req(ability_acquire_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return ability_acquire_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability_acquire_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability_acquire_req(this);
        }
        public void Clear()
        {
            // abilityId
            abilityId_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // abilityId
            totalSize += Yippee.Net.Internal.Size(abilityId_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability_acquire_req)from);
        }
        public void CopyFrom(ability_acquire_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability_acquire_req)from);
        }
        public void MergeFrom(ability_acquire_req from)
        {
            if (from == this)
            {
                return;
            }

            // abilityId
            SetAbilityId(from.GetAbilityId());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // abilityId
            if (Yippee.Net.Internal.Serialize(output, abilityId_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // abilityId
            if (Yippee.Net.Internal.Deserialize(input, out abilityId_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetAbilityId()
        {
            return abilityId_;
        }
        public void SetAbilityId(int value)
        {
            abilityId_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class ability_acquire_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private ability updatedAbility_ = new ability();
        private static Yippee.Net.TypeInfo ability_acquire_ansTypeInfo_ = new Yippee.Net.TypeInfo(0x30DE863, "protocol.ability_acquire_ans");

        public ability_acquire_ans()
        {
        }
        public ability_acquire_ans(ability_acquire_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return ability_acquire_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new ability_acquire_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new ability_acquire_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // updatedAbility
            updatedAbility_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // updatedAbility
            totalSize += Yippee.Net.Internal.Size(updatedAbility_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((ability_acquire_ans)from);
        }
        public void CopyFrom(ability_acquire_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((ability_acquire_ans)from);
        }
        public void MergeFrom(ability_acquire_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // updatedAbility
            SetUpdatedAbility(from.GetUpdatedAbility());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // updatedAbility
            if (updatedAbility_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // updatedAbility
            if (updatedAbility_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public ability GetUpdatedAbility()
        {
            return updatedAbility_;
        }
        public void SetUpdatedAbility(ability value)
        {
            updatedAbility_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------


}	// namespace protocol