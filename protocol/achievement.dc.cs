// Generated by the DRCat compiler. DO NOT EDIT!

using System.Collections.Generic;
using System.IO;
using System;


namespace protocol
{

    // ================================================================================================

    public class achievement_info : Yippee.Net.IObjectBase
    {
        private int achievementId_;
        private record_data_key recordKey_;
        private int progress_;
        private int goal_;
        private bool receiveReward_;
        private reward_info reward_ = new reward_info();
        private static Yippee.Net.TypeInfo achievement_infoTypeInfo_ = new Yippee.Net.TypeInfo(0x8EB8B7F, "protocol.achievement_info");

        public achievement_info()
        {
        }
        public achievement_info(achievement_info from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return achievement_infoTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new achievement_info();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new achievement_info(this);
        }
        public void Clear()
        {
            // achievementId
            achievementId_ = 0;
            // recordKey
            recordKey_ = 0;
            // progress
            progress_ = 0;
            // goal
            goal_ = 0;
            // receiveReward
            receiveReward_ = false;
            // reward
            reward_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // achievementId
            totalSize += Yippee.Net.Internal.Size(achievementId_);
            // recordKey
            totalSize += sizeof(int);
            // progress
            totalSize += Yippee.Net.Internal.Size(progress_);
            // goal
            totalSize += Yippee.Net.Internal.Size(goal_);
            // receiveReward
            totalSize += Yippee.Net.Internal.Size(receiveReward_);
            // reward
            totalSize += Yippee.Net.Internal.Size(reward_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((achievement_info)from);
        }
        public void CopyFrom(achievement_info from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((achievement_info)from);
        }
        public void MergeFrom(achievement_info from)
        {
            if (from == this)
            {
                return;
            }

            // achievementId
            SetAchievementId(from.GetAchievementId());
            // recordKey
            SetRecordKey(from.GetRecordKey());
            // progress
            SetProgress(from.GetProgress());
            // goal
            SetGoal(from.GetGoal());
            // receiveReward
            SetReceiveReward(from.GetReceiveReward());
            // reward
            SetReward(from.GetReward());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // achievementId
            if (Yippee.Net.Internal.Serialize(output, achievementId_) == false)
            {
                return false;
            }
            // recordKey
            {
                int value = (int)recordKey_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }
            // progress
            if (Yippee.Net.Internal.Serialize(output, progress_) == false)
            {
                return false;
            }
            // goal
            if (Yippee.Net.Internal.Serialize(output, goal_) == false)
            {
                return false;
            }
            // receiveReward
            if (Yippee.Net.Internal.Serialize(output, receiveReward_) == false)
            {
                return false;
            }
            // reward
            if (reward_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // achievementId
            if (Yippee.Net.Internal.Deserialize(input, out achievementId_) == false)
            {
                return false;
            }
            // recordKey
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                recordKey_ = (record_data_key)value;
            }
            // progress
            if (Yippee.Net.Internal.Deserialize(input, out progress_) == false)
            {
                return false;
            }
            // goal
            if (Yippee.Net.Internal.Deserialize(input, out goal_) == false)
            {
                return false;
            }
            // receiveReward
            if (Yippee.Net.Internal.Deserialize(input, out receiveReward_) == false)
            {
                return false;
            }
            // reward
            if (reward_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public int GetAchievementId()
        {
            return achievementId_;
        }
        public void SetAchievementId(int value)
        {
            achievementId_ = value;
        }
        public record_data_key GetRecordKey()
        {
            return recordKey_;
        }
        public void SetRecordKey(record_data_key value)
        {
            recordKey_ = value;
        }
        public int GetProgress()
        {
            return progress_;
        }
        public void SetProgress(int value)
        {
            progress_ = value;
        }
        public int GetGoal()
        {
            return goal_;
        }
        public void SetGoal(int value)
        {
            goal_ = value;
        }
        public bool GetReceiveReward()
        {
            return receiveReward_;
        }
        public void SetReceiveReward(bool value)
        {
            receiveReward_ = value;
        }
        public reward_info GetReward()
        {
            return reward_;
        }
        public void SetReward(reward_info value)
        {
            reward_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class achievement_list : Yippee.Net.IObjectBase
    {
        private achievement_info[] infos_ = new achievement_info[0];
        private static Yippee.Net.TypeInfo achievement_listTypeInfo_ = new Yippee.Net.TypeInfo(0x8ECBF14, "protocol.achievement_list");

        public achievement_list()
        {
        }
        public achievement_list(achievement_list from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return achievement_listTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new achievement_list();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new achievement_list(this);
        }
        public void Clear()
        {
            // infos
            Array.Resize(ref infos_, 0);
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // infos
            totalSize += sizeof(uint);
            for (uint i = 0; i != infos_.Length; ++i)
            {
                totalSize += Yippee.Net.Internal.Size(infos_[i]);
            }

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((achievement_list)from);
        }
        public void CopyFrom(achievement_list from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((achievement_list)from);
        }
        public void MergeFrom(achievement_list from)
        {
            if (from == this)
            {
                return;
            }

            // infos
            int infosLength = infos_.Length;
            Array.Resize(ref infos_, infosLength + from.infos_.Length);
            Array.Copy(from.infos_, 0, infos_, infosLength, from.infos_.Length);
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // infos
            uint infosLength = (uint)infos_.Length;
            if (Yippee.Net.Internal.Serialize(output, infosLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < infosLength; ++i)
            {
                if (infos_[i].Serialize(stream) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // infos
            uint infosLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out infosLength) == false)
            {
                return false;
            }
            Array.Resize(ref infos_, (int)infosLength);
            for (uint i = 0; i < infosLength; ++i)
            {
                achievement_info newInfos = new achievement_info();
                if (newInfos.Deserialize(stream) == false)
                {
                    return false;
                }
                infos_[i] = newInfos;
            }

            return true;
        }
        public achievement_info[] GetInfos()
        {
            return infos_;
        }
        public achievement_info GetInfos(int index)
        {
            return infos_[index];
        }
        public void SetInfos(achievement_info[] infos)
        {
            infos_ = infos;
        }
        public void AddInfos(achievement_info infos)
        {
            Array.Resize(ref infos_, infos_.Length + 1);
            infos_[infos_.Length - 1] = infos;
        }
        public void RemoveInfos(achievement_info infos)
        {
            int i = 0;
            for (; i < infos_.Length; ++i)
            {
                if (infos_[i] == infos)
                {
                    break;
                }
            }
            if (i == infos_.Length)
            {
                return;
            }
            for (; i < infos_.Length - 1; ++i)
            {
                infos_[i] = infos_[i+1];
            }
            Array.Resize(ref infos_, infos_.Length - 1);
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class achievement_list_req : Yippee.Net.IObjectBase
    {
        private static Yippee.Net.TypeInfo achievement_list_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xF128471, "protocol.achievement_list_req");

        public achievement_list_req()
        {
        }
        public achievement_list_req(achievement_list_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return achievement_list_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new achievement_list_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new achievement_list_req(this);
        }
        public void Clear()
        {
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((achievement_list_req)from);
        }
        public void CopyFrom(achievement_list_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((achievement_list_req)from);
        }
        public void MergeFrom(achievement_list_req from)
        {
            if (from == this)
            {
                return;
            }
        }
        public bool Serialize(Stream stream)
        {
            return true;
        }
        public bool Deserialize(Stream stream)
        {
            return true;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class achievement_list_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private achievement_list infos_ = new achievement_list();
        private static Yippee.Net.TypeInfo achievement_list_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xF12BCE3, "protocol.achievement_list_ans");

        public achievement_list_ans()
        {
        }
        public achievement_list_ans(achievement_list_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return achievement_list_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new achievement_list_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new achievement_list_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // infos
            infos_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // infos
            totalSize += Yippee.Net.Internal.Size(infos_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((achievement_list_ans)from);
        }
        public void CopyFrom(achievement_list_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((achievement_list_ans)from);
        }
        public void MergeFrom(achievement_list_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // infos
            SetInfos(from.GetInfos());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // infos
            if (infos_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // infos
            if (infos_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public achievement_list GetInfos()
        {
            return infos_;
        }
        public void SetInfos(achievement_list value)
        {
            infos_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class achievement_receive_reward_req : Yippee.Net.IObjectBase
    {
        private int achievementId_;
        private static Yippee.Net.TypeInfo achievement_receive_reward_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xC3CC0F1, "protocol.achievement_receive_reward_req");

        public achievement_receive_reward_req()
        {
        }
        public achievement_receive_reward_req(achievement_receive_reward_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return achievement_receive_reward_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new achievement_receive_reward_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new achievement_receive_reward_req(this);
        }
        public void Clear()
        {
            // achievementId
            achievementId_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // achievementId
            totalSize += Yippee.Net.Internal.Size(achievementId_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((achievement_receive_reward_req)from);
        }
        public void CopyFrom(achievement_receive_reward_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((achievement_receive_reward_req)from);
        }
        public void MergeFrom(achievement_receive_reward_req from)
        {
            if (from == this)
            {
                return;
            }

            // achievementId
            SetAchievementId(from.GetAchievementId());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // achievementId
            if (Yippee.Net.Internal.Serialize(output, achievementId_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // achievementId
            if (Yippee.Net.Internal.Deserialize(input, out achievementId_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetAchievementId()
        {
            return achievementId_;
        }
        public void SetAchievementId(int value)
        {
            achievementId_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class achievement_receive_reward_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private reward_info reward_ = new reward_info();
        private achievement_info updatedInfo_ = new achievement_info();
        private static Yippee.Net.TypeInfo achievement_receive_reward_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xC3D0063, "protocol.achievement_receive_reward_ans");

        public achievement_receive_reward_ans()
        {
        }
        public achievement_receive_reward_ans(achievement_receive_reward_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return achievement_receive_reward_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new achievement_receive_reward_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new achievement_receive_reward_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // reward
            reward_.Clear();
            // updatedInfo
            updatedInfo_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // reward
            totalSize += Yippee.Net.Internal.Size(reward_);
            // updatedInfo
            totalSize += Yippee.Net.Internal.Size(updatedInfo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((achievement_receive_reward_ans)from);
        }
        public void CopyFrom(achievement_receive_reward_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((achievement_receive_reward_ans)from);
        }
        public void MergeFrom(achievement_receive_reward_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // reward
            SetReward(from.GetReward());
            // updatedInfo
            SetUpdatedInfo(from.GetUpdatedInfo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // reward
            if (reward_.Serialize(stream) == false)
            {
                return false;
            }
            // updatedInfo
            if (updatedInfo_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // reward
            if (reward_.Deserialize(stream) == false)
            {
                return false;
            }
            // updatedInfo
            if (updatedInfo_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public reward_info GetReward()
        {
            return reward_;
        }
        public void SetReward(reward_info value)
        {
            reward_ = value;
        }
        public achievement_info GetUpdatedInfo()
        {
            return updatedInfo_;
        }
        public void SetUpdatedInfo(achievement_info value)
        {
            updatedInfo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class achievement_accomplished_notify : Yippee.Net.IObjectBase
    {
        private int achievementId_;
        private static Yippee.Net.TypeInfo achievement_accomplished_notifyTypeInfo_ = new Yippee.Net.TypeInfo(0xC3CAE59, "protocol.achievement_accomplished_notify");

        public achievement_accomplished_notify()
        {
        }
        public achievement_accomplished_notify(achievement_accomplished_notify from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return achievement_accomplished_notifyTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new achievement_accomplished_notify();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new achievement_accomplished_notify(this);
        }
        public void Clear()
        {
            // achievementId
            achievementId_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // achievementId
            totalSize += Yippee.Net.Internal.Size(achievementId_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((achievement_accomplished_notify)from);
        }
        public void CopyFrom(achievement_accomplished_notify from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((achievement_accomplished_notify)from);
        }
        public void MergeFrom(achievement_accomplished_notify from)
        {
            if (from == this)
            {
                return;
            }

            // achievementId
            SetAchievementId(from.GetAchievementId());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // achievementId
            if (Yippee.Net.Internal.Serialize(output, achievementId_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // achievementId
            if (Yippee.Net.Internal.Deserialize(input, out achievementId_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetAchievementId()
        {
            return achievementId_;
        }
        public void SetAchievementId(int value)
        {
            achievementId_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------


}	// namespace protocol