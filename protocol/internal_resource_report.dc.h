// Generated by the SpringCat.Wave compiler. DO NOT EDIT!

#ifndef __SPRINGCAT_WAVE_INTERNAL_RESOURCE_REPORT_DC_H_INCLUDE__
#define __SPRINGCAT_WAVE_INTERNAL_RESOURCE_REPORT_DC_H_INCLUDE__

#include <SpringCat/SpringCat.h>


namespace protocol
{

class game_monitor_data;
class monitor_data_req;
class monitor_data_ans;

enum HardwareResourceKey
{
    HardwareResourceKey_CPU_USAGE = 1,
    HardwareResourceKey_MEM_USAGE = 2,
    HardwareResourceKey_DISK_USAGE = 3,
};    // enum HardwareResourceKey

enum GameResourceKey
{
    GameResourceKey_USER_COUNT = 1,
    GameResourceKey_ROOM_COUNT = 2,
    GameResourceKey_PLAY_COUNT = 3,
};    // enum GameResourceKey

// ================================================================================================

class game_monitor_data : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<3> __has_bits__;

private:
    std::string machine_name_;
    std::map<HardwareResourceKey, SpringCat::int32_t> machine_resource_info_;
    std::map<GameResourceKey, SpringCat::int32_t> game_resource_info_;

public:
    game_monitor_data(void);
    game_monitor_data(const game_monitor_data& from);
    virtual ~game_monitor_data(void);

    inline game_monitor_data& operator=(const game_monitor_data& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual game_monitor_data* new_instance(void) const;
    virtual game_monitor_data* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const game_monitor_data& from);
    void merge_from(const game_monitor_data& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // machine_name
    const std::string& get_machine_name(void) const;
    std::string* get_mutable_machine_name(void);
    void set_machine_name(const std::string& value);
    void set_machine_name(const char* value);

    // machine_resource_info
    const std::map<HardwareResourceKey, SpringCat::int32_t>& get_machine_resource_info(void) const;
    std::map<HardwareResourceKey, SpringCat::int32_t>* get_mutable_machine_resource_info(void);
    bool get_machine_resource_info(HardwareResourceKey key, SpringCat::int32_t* value) const;
    void set_machine_resource_info(HardwareResourceKey key, SpringCat::int32_t value);
    bool insert_machine_resource_info(HardwareResourceKey key, SpringCat::int32_t value);

    // game_resource_info
    const std::map<GameResourceKey, SpringCat::int32_t>& get_game_resource_info(void) const;
    std::map<GameResourceKey, SpringCat::int32_t>* get_mutable_game_resource_info(void);
    bool get_game_resource_info(GameResourceKey key, SpringCat::int32_t* value) const;
    void set_game_resource_info(GameResourceKey key, SpringCat::int32_t value);
    bool insert_game_resource_info(GameResourceKey key, SpringCat::int32_t value);
};
// ------------------------------------------------------------------------------------------------

class monitor_data_req : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<0> __has_bits__;

private:

public:
    monitor_data_req(void);
    monitor_data_req(const monitor_data_req& from);
    virtual ~monitor_data_req(void);

    inline monitor_data_req& operator=(const monitor_data_req& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual monitor_data_req* new_instance(void) const;
    virtual monitor_data_req* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const monitor_data_req& from);
    void merge_from(const monitor_data_req& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);
};
// ------------------------------------------------------------------------------------------------

class monitor_data_ans : public SpringCat::Wave::object_base
{
private:
    SpringCat::Wave::internal::bitset<2> __has_bits__;

private:
    SpringCat::int16_t result_;
    std::auto_ptr<game_monitor_data> data_;

public:
    monitor_data_ans(void);
    monitor_data_ans(const monitor_data_ans& from);
    virtual ~monitor_data_ans(void);

    inline monitor_data_ans& operator=(const monitor_data_ans& rhs)
    {
        copy_from(rhs);
        return *this;
    }

    static const SpringCat::Wave::type_info& static_type_info(void);
    virtual const SpringCat::Wave::type_info& runtime_type_info(void) const;

    virtual monitor_data_ans* new_instance(void) const;
    virtual monitor_data_ans* clone(void) const;

    virtual void clear(void);

    virtual bool initialized(void) const;
    virtual SpringCat::uint32_t size(void) const;

    virtual void copy_from(const SpringCat::Wave::object_base& from);
    virtual void merge_from(const SpringCat::Wave::object_base& from);
    void copy_from(const monitor_data_ans& from);
    void merge_from(const monitor_data_ans& from);

    virtual bool serialize(SpringCat::System::Stream& output) const;
    virtual bool serialize(std::ostream& output) const;
    virtual bool serialize(std::string& output) const;

    virtual bool deserialize(SpringCat::System::Stream& input);
    virtual bool deserialize(std::ostream& input);
    virtual bool deserialize(std::string& input);

    // result
    SpringCat::int16_t get_result(void) const;
    void set_result(SpringCat::int16_t value);

    // data
    const game_monitor_data* get_data(void) const;
    game_monitor_data* get_mutable_data(void);
};
// ------------------------------------------------------------------------------------------------



}    // namespace protocol

#endif    // __SPRINGCAT_WAVE_INTERNAL_RESOURCE_REPORT_DC_INCLUDE__
