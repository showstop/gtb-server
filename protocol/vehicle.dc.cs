// Generated by the DRCat compiler. DO NOT EDIT!

using System.Collections.Generic;
using System.IO;
using System;


namespace protocol
{

    public enum vehicle_level
    {
        LOCKED = 0,
        D_CLASS = 1,
        C_CLASS = 2,
        B_CLASS = 3,
        A_CLASS = 4,
        S_CLASS = 5,
    };	// enum vehicle_level

    public enum vehicle_parts_id
    {
        BATTERY = 1,
        BODY_KIT = 2,
        MOTOR = 3,
        SUSPENSION = 4,
    };	// enum vehicle_parts_id

    // ================================================================================================

    public class vehicle_stat : Yippee.Net.IObjectBase
    {
        private short spd_;
        private short pow_;
        private short acc_;
        private short hp_;
        private static Yippee.Net.TypeInfo vehicle_statTypeInfo_ = new Yippee.Net.TypeInfo(0x1E8B7A4, "protocol.vehicle_stat");

        public vehicle_stat()
        {
        }
        public vehicle_stat(vehicle_stat from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_statTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_stat();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_stat(this);
        }
        public void Clear()
        {
            // spd
            spd_ = 0;
            // pow
            pow_ = 0;
            // acc
            acc_ = 0;
            // hp
            hp_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // spd
            totalSize += Yippee.Net.Internal.Size(spd_);
            // pow
            totalSize += Yippee.Net.Internal.Size(pow_);
            // acc
            totalSize += Yippee.Net.Internal.Size(acc_);
            // hp
            totalSize += Yippee.Net.Internal.Size(hp_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_stat)from);
        }
        public void CopyFrom(vehicle_stat from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_stat)from);
        }
        public void MergeFrom(vehicle_stat from)
        {
            if (from == this)
            {
                return;
            }

            // spd
            SetSpd(from.GetSpd());
            // pow
            SetPow(from.GetPow());
            // acc
            SetAcc(from.GetAcc());
            // hp
            SetHp(from.GetHp());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // spd
            if (Yippee.Net.Internal.Serialize(output, spd_) == false)
            {
                return false;
            }
            // pow
            if (Yippee.Net.Internal.Serialize(output, pow_) == false)
            {
                return false;
            }
            // acc
            if (Yippee.Net.Internal.Serialize(output, acc_) == false)
            {
                return false;
            }
            // hp
            if (Yippee.Net.Internal.Serialize(output, hp_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // spd
            if (Yippee.Net.Internal.Deserialize(input, out spd_) == false)
            {
                return false;
            }
            // pow
            if (Yippee.Net.Internal.Deserialize(input, out pow_) == false)
            {
                return false;
            }
            // acc
            if (Yippee.Net.Internal.Deserialize(input, out acc_) == false)
            {
                return false;
            }
            // hp
            if (Yippee.Net.Internal.Deserialize(input, out hp_) == false)
            {
                return false;
            }

            return true;
        }
        public short GetSpd()
        {
            return spd_;
        }
        public void SetSpd(short value)
        {
            spd_ = value;
        }
        public short GetPow()
        {
            return pow_;
        }
        public void SetPow(short value)
        {
            pow_ = value;
        }
        public short GetAcc()
        {
            return acc_;
        }
        public void SetAcc(short value)
        {
            acc_ = value;
        }
        public short GetHp()
        {
            return hp_;
        }
        public void SetHp(short value)
        {
            hp_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_stuff : Yippee.Net.IObjectBase
    {
        private Dictionary<int, int> stuffInfo_ = new Dictionary<int, int>();
        private static Yippee.Net.TypeInfo vehicle_stuffTypeInfo_ = new Yippee.Net.TypeInfo(0xE8B69D6, "protocol.vehicle_stuff");

        public vehicle_stuff()
        {
        }
        public vehicle_stuff(vehicle_stuff from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_stuffTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_stuff();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_stuff(this);
        }
        public void Clear()
        {
            // stuffInfo
            stuffInfo_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // stuffInfo
            totalSize += sizeof(uint);
            totalSize += sizeof(int) * stuffInfo_.Count;
            totalSize += sizeof(int) * stuffInfo_.Count;

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_stuff)from);
        }
        public void CopyFrom(vehicle_stuff from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_stuff)from);
        }
        public void MergeFrom(vehicle_stuff from)
        {
            if (from == this)
            {
                return;
            }

            // stuffInfo
            foreach (KeyValuePair<int, int> pair in from.GetStuffInfo())
            {
                SetStuffInfo(pair.Key, pair.Value);
            }
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // stuffInfo
            uint stuffInfoLength = (uint)stuffInfo_.Count;
            if (Yippee.Net.Internal.Serialize(output, stuffInfoLength) == false)
            {
                return false;
            }
            foreach (KeyValuePair<int, int> pair in stuffInfo_)
            {
                if (Yippee.Net.Internal.Serialize(output, pair.Key) == false)
                {
                    return false;
                }
                if (Yippee.Net.Internal.Serialize(output, pair.Value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // stuffInfo
            uint stuffInfoLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out stuffInfoLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < stuffInfoLength; ++i)
            {
                int key;
                if (Yippee.Net.Internal.Deserialize(input, out key) == false)
                {
                    return false;
                }
                int value;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                SetStuffInfo(key, value);
            }

            return true;
        }
        public Dictionary<int, int> GetStuffInfo()
        {
            return stuffInfo_;
        }
        public bool GetStuffInfo(int key, out int value)
        {
            return stuffInfo_.TryGetValue(key, out value);
        }
        public int GetStuffInfo(int key)
        {
            int ret;
            stuffInfo_.TryGetValue(key, out ret);
            return ret;
        }
        public void SetStuffInfo(int key, int value)
        {
            stuffInfo_[key] = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_skill : Yippee.Net.IObjectBase
    {
        private int skillId_;
        private short skillLv_;
        private static Yippee.Net.TypeInfo vehicle_skillTypeInfo_ = new Yippee.Net.TypeInfo(0xE89CE3C, "protocol.vehicle_skill");

        public vehicle_skill()
        {
        }
        public vehicle_skill(vehicle_skill from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_skillTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_skill();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_skill(this);
        }
        public void Clear()
        {
            // skillId
            skillId_ = 0;
            // skillLv
            skillLv_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // skillId
            totalSize += Yippee.Net.Internal.Size(skillId_);
            // skillLv
            totalSize += Yippee.Net.Internal.Size(skillLv_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_skill)from);
        }
        public void CopyFrom(vehicle_skill from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_skill)from);
        }
        public void MergeFrom(vehicle_skill from)
        {
            if (from == this)
            {
                return;
            }

            // skillId
            SetSkillId(from.GetSkillId());
            // skillLv
            SetSkillLv(from.GetSkillLv());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // skillId
            if (Yippee.Net.Internal.Serialize(output, skillId_) == false)
            {
                return false;
            }
            // skillLv
            if (Yippee.Net.Internal.Serialize(output, skillLv_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // skillId
            if (Yippee.Net.Internal.Deserialize(input, out skillId_) == false)
            {
                return false;
            }
            // skillLv
            if (Yippee.Net.Internal.Deserialize(input, out skillLv_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetSkillId()
        {
            return skillId_;
        }
        public void SetSkillId(int value)
        {
            skillId_ = value;
        }
        public short GetSkillLv()
        {
            return skillLv_;
        }
        public void SetSkillLv(short value)
        {
            skillLv_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_parts : Yippee.Net.IObjectBase
    {
        private vehicle_parts_id partsId_;
        private short level_;
        private short exp_;
        private Dictionary<int, short> needStuffs_ = new Dictionary<int, short>();
        private static Yippee.Net.TypeInfo vehicle_partsTypeInfo_ = new Yippee.Net.TypeInfo(0xE875BA3, "protocol.vehicle_parts");

        public vehicle_parts()
        {
        }
        public vehicle_parts(vehicle_parts from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_partsTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_parts();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_parts(this);
        }
        public void Clear()
        {
            // partsId
            partsId_ = 0;
            // level
            level_ = 0;
            // exp
            exp_ = 0;
            // needStuffs
            needStuffs_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // partsId
            totalSize += sizeof(int);
            // level
            totalSize += Yippee.Net.Internal.Size(level_);
            // exp
            totalSize += Yippee.Net.Internal.Size(exp_);
            // needStuffs
            totalSize += sizeof(uint);
            totalSize += sizeof(int) * needStuffs_.Count;
            totalSize += sizeof(short) * needStuffs_.Count;

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_parts)from);
        }
        public void CopyFrom(vehicle_parts from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_parts)from);
        }
        public void MergeFrom(vehicle_parts from)
        {
            if (from == this)
            {
                return;
            }

            // partsId
            SetPartsId(from.GetPartsId());
            // level
            SetLevel(from.GetLevel());
            // exp
            SetExp(from.GetExp());
            // needStuffs
            foreach (KeyValuePair<int, short> pair in from.GetNeedStuffs())
            {
                SetNeedStuffs(pair.Key, pair.Value);
            }
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // partsId
            {
                int value = (int)partsId_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }
            // level
            if (Yippee.Net.Internal.Serialize(output, level_) == false)
            {
                return false;
            }
            // exp
            if (Yippee.Net.Internal.Serialize(output, exp_) == false)
            {
                return false;
            }
            // needStuffs
            uint needStuffsLength = (uint)needStuffs_.Count;
            if (Yippee.Net.Internal.Serialize(output, needStuffsLength) == false)
            {
                return false;
            }
            foreach (KeyValuePair<int, short> pair in needStuffs_)
            {
                if (Yippee.Net.Internal.Serialize(output, pair.Key) == false)
                {
                    return false;
                }
                if (Yippee.Net.Internal.Serialize(output, pair.Value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // partsId
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                partsId_ = (vehicle_parts_id)value;
            }
            // level
            if (Yippee.Net.Internal.Deserialize(input, out level_) == false)
            {
                return false;
            }
            // exp
            if (Yippee.Net.Internal.Deserialize(input, out exp_) == false)
            {
                return false;
            }
            // needStuffs
            uint needStuffsLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out needStuffsLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < needStuffsLength; ++i)
            {
                int key;
                if (Yippee.Net.Internal.Deserialize(input, out key) == false)
                {
                    return false;
                }
                short value;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                SetNeedStuffs(key, value);
            }

            return true;
        }
        public vehicle_parts_id GetPartsId()
        {
            return partsId_;
        }
        public void SetPartsId(vehicle_parts_id value)
        {
            partsId_ = value;
        }
        public short GetLevel()
        {
            return level_;
        }
        public void SetLevel(short value)
        {
            level_ = value;
        }
        public short GetExp()
        {
            return exp_;
        }
        public void SetExp(short value)
        {
            exp_ = value;
        }
        public Dictionary<int, short> GetNeedStuffs()
        {
            return needStuffs_;
        }
        public bool GetNeedStuffs(int key, out short value)
        {
            return needStuffs_.TryGetValue(key, out value);
        }
        public short GetNeedStuffs(int key)
        {
            short ret;
            needStuffs_.TryGetValue(key, out ret);
            return ret;
        }
        public void SetNeedStuffs(int key, short value)
        {
            needStuffs_[key] = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle : Yippee.Net.IObjectBase
    {
        private int vehicleNo_;
        private vehicle_level level_;
        private short holdCard_;
        private vehicle_skill[] skills_ = new vehicle_skill[0];
        private vehicle_parts[] parts_ = new vehicle_parts[0];
        private vehicle_stat stat_ = new vehicle_stat();
        private static Yippee.Net.TypeInfo vehicleTypeInfo_ = new Yippee.Net.TypeInfo(0x7E1D215, "protocol.vehicle");

        public vehicle()
        {
        }
        public vehicle(vehicle from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicleTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle(this);
        }
        public void Clear()
        {
            // vehicleNo
            vehicleNo_ = 0;
            // level
            level_ = 0;
            // holdCard
            holdCard_ = 0;
            // skills
            Array.Resize(ref skills_, 0);
            // parts
            Array.Resize(ref parts_, 0);
            // stat
            stat_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // vehicleNo
            totalSize += Yippee.Net.Internal.Size(vehicleNo_);
            // level
            totalSize += sizeof(int);
            // holdCard
            totalSize += Yippee.Net.Internal.Size(holdCard_);
            // skills
            totalSize += sizeof(uint);
            for (uint i = 0; i != skills_.Length; ++i)
            {
                totalSize += Yippee.Net.Internal.Size(skills_[i]);
            }
            // parts
            totalSize += sizeof(uint);
            for (uint i = 0; i != parts_.Length; ++i)
            {
                totalSize += Yippee.Net.Internal.Size(parts_[i]);
            }
            // stat
            totalSize += Yippee.Net.Internal.Size(stat_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle)from);
        }
        public void CopyFrom(vehicle from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle)from);
        }
        public void MergeFrom(vehicle from)
        {
            if (from == this)
            {
                return;
            }

            // vehicleNo
            SetVehicleNo(from.GetVehicleNo());
            // level
            SetLevel(from.GetLevel());
            // holdCard
            SetHoldCard(from.GetHoldCard());
            // skills
            int skillsLength = skills_.Length;
            Array.Resize(ref skills_, skillsLength + from.skills_.Length);
            Array.Copy(from.skills_, 0, skills_, skillsLength, from.skills_.Length);
            // parts
            int partsLength = parts_.Length;
            Array.Resize(ref parts_, partsLength + from.parts_.Length);
            Array.Copy(from.parts_, 0, parts_, partsLength, from.parts_.Length);
            // stat
            SetStat(from.GetStat());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // vehicleNo
            if (Yippee.Net.Internal.Serialize(output, vehicleNo_) == false)
            {
                return false;
            }
            // level
            {
                int value = (int)level_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }
            // holdCard
            if (Yippee.Net.Internal.Serialize(output, holdCard_) == false)
            {
                return false;
            }
            // skills
            uint skillsLength = (uint)skills_.Length;
            if (Yippee.Net.Internal.Serialize(output, skillsLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < skillsLength; ++i)
            {
                if (skills_[i].Serialize(stream) == false)
                {
                    return false;
                }
            }
            // parts
            uint partsLength = (uint)parts_.Length;
            if (Yippee.Net.Internal.Serialize(output, partsLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < partsLength; ++i)
            {
                if (parts_[i].Serialize(stream) == false)
                {
                    return false;
                }
            }
            // stat
            if (stat_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // vehicleNo
            if (Yippee.Net.Internal.Deserialize(input, out vehicleNo_) == false)
            {
                return false;
            }
            // level
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                level_ = (vehicle_level)value;
            }
            // holdCard
            if (Yippee.Net.Internal.Deserialize(input, out holdCard_) == false)
            {
                return false;
            }
            // skills
            uint skillsLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out skillsLength) == false)
            {
                return false;
            }
            Array.Resize(ref skills_, (int)skillsLength);
            for (uint i = 0; i < skillsLength; ++i)
            {
                vehicle_skill newSkills = new vehicle_skill();
                if (newSkills.Deserialize(stream) == false)
                {
                    return false;
                }
                skills_[i] = newSkills;
            }
            // parts
            uint partsLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out partsLength) == false)
            {
                return false;
            }
            Array.Resize(ref parts_, (int)partsLength);
            for (uint i = 0; i < partsLength; ++i)
            {
                vehicle_parts newParts = new vehicle_parts();
                if (newParts.Deserialize(stream) == false)
                {
                    return false;
                }
                parts_[i] = newParts;
            }
            // stat
            if (stat_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public int GetVehicleNo()
        {
            return vehicleNo_;
        }
        public void SetVehicleNo(int value)
        {
            vehicleNo_ = value;
        }
        public vehicle_level GetLevel()
        {
            return level_;
        }
        public void SetLevel(vehicle_level value)
        {
            level_ = value;
        }
        public short GetHoldCard()
        {
            return holdCard_;
        }
        public void SetHoldCard(short value)
        {
            holdCard_ = value;
        }
        public vehicle_skill[] GetSkills()
        {
            return skills_;
        }
        public vehicle_skill GetSkills(int index)
        {
            return skills_[index];
        }
        public void SetSkills(vehicle_skill[] skills)
        {
            skills_ = skills;
        }
        public void AddSkills(vehicle_skill skills)
        {
            Array.Resize(ref skills_, skills_.Length + 1);
            skills_[skills_.Length - 1] = skills;
        }
        public void RemoveSkills(vehicle_skill skills)
        {
            int i = 0;
            for (; i < skills_.Length; ++i)
            {
                if (skills_[i] == skills)
                {
                    break;
                }
            }
            if (i == skills_.Length)
            {
                return;
            }
            for (; i < skills_.Length - 1; ++i)
            {
                skills_[i] = skills_[i+1];
            }
            Array.Resize(ref skills_, skills_.Length - 1);
        }
        public vehicle_parts[] GetParts()
        {
            return parts_;
        }
        public vehicle_parts GetParts(int index)
        {
            return parts_[index];
        }
        public void SetParts(vehicle_parts[] parts)
        {
            parts_ = parts;
        }
        public void AddParts(vehicle_parts parts)
        {
            Array.Resize(ref parts_, parts_.Length + 1);
            parts_[parts_.Length - 1] = parts;
        }
        public void RemoveParts(vehicle_parts parts)
        {
            int i = 0;
            for (; i < parts_.Length; ++i)
            {
                if (parts_[i] == parts)
                {
                    break;
                }
            }
            if (i == parts_.Length)
            {
                return;
            }
            for (; i < parts_.Length - 1; ++i)
            {
                parts_[i] = parts_[i+1];
            }
            Array.Resize(ref parts_, parts_.Length - 1);
        }
        public vehicle_stat GetStat()
        {
            return stat_;
        }
        public void SetStat(vehicle_stat value)
        {
            stat_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_list : Yippee.Net.IObjectBase
    {
        private vehicle[] infos_ = new vehicle[0];
        private static Yippee.Net.TypeInfo vehicle_listTypeInfo_ = new Yippee.Net.TypeInfo(0x1EC4D84, "protocol.vehicle_list");

        public vehicle_list()
        {
        }
        public vehicle_list(vehicle_list from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_listTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_list();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_list(this);
        }
        public void Clear()
        {
            // infos
            Array.Resize(ref infos_, 0);
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // infos
            totalSize += sizeof(uint);
            for (uint i = 0; i != infos_.Length; ++i)
            {
                totalSize += Yippee.Net.Internal.Size(infos_[i]);
            }

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_list)from);
        }
        public void CopyFrom(vehicle_list from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_list)from);
        }
        public void MergeFrom(vehicle_list from)
        {
            if (from == this)
            {
                return;
            }

            // infos
            int infosLength = infos_.Length;
            Array.Resize(ref infos_, infosLength + from.infos_.Length);
            Array.Copy(from.infos_, 0, infos_, infosLength, from.infos_.Length);
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // infos
            uint infosLength = (uint)infos_.Length;
            if (Yippee.Net.Internal.Serialize(output, infosLength) == false)
            {
                return false;
            }
            for (uint i = 0; i < infosLength; ++i)
            {
                if (infos_[i].Serialize(stream) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // infos
            uint infosLength = 0;
            if (Yippee.Net.Internal.Deserialize(input, out infosLength) == false)
            {
                return false;
            }
            Array.Resize(ref infos_, (int)infosLength);
            for (uint i = 0; i < infosLength; ++i)
            {
                vehicle newInfos = new vehicle();
                if (newInfos.Deserialize(stream) == false)
                {
                    return false;
                }
                infos_[i] = newInfos;
            }

            return true;
        }
        public vehicle[] GetInfos()
        {
            return infos_;
        }
        public vehicle GetInfos(int index)
        {
            return infos_[index];
        }
        public void SetInfos(vehicle[] infos)
        {
            infos_ = infos;
        }
        public void AddInfos(vehicle infos)
        {
            Array.Resize(ref infos_, infos_.Length + 1);
            infos_[infos_.Length - 1] = infos;
        }
        public void RemoveInfos(vehicle infos)
        {
            int i = 0;
            for (; i < infos_.Length; ++i)
            {
                if (infos_[i] == infos)
                {
                    break;
                }
            }
            if (i == infos_.Length)
            {
                return;
            }
            for (; i < infos_.Length - 1; ++i)
            {
                infos_[i] = infos_[i+1];
            }
            Array.Resize(ref infos_, infos_.Length - 1);
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_list_req : Yippee.Net.IObjectBase
    {
        private ulong playerNo_;
        private static Yippee.Net.TypeInfo vehicle_list_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xD898481, "protocol.vehicle_list_req");

        public vehicle_list_req()
        {
        }
        public vehicle_list_req(vehicle_list_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_list_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_list_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_list_req(this);
        }
        public void Clear()
        {
            // playerNo
            playerNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // playerNo
            totalSize += Yippee.Net.Internal.Size(playerNo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_list_req)from);
        }
        public void CopyFrom(vehicle_list_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_list_req)from);
        }
        public void MergeFrom(vehicle_list_req from)
        {
            if (from == this)
            {
                return;
            }

            // playerNo
            SetPlayerNo(from.GetPlayerNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // playerNo
            if (Yippee.Net.Internal.Serialize(output, playerNo_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // playerNo
            if (Yippee.Net.Internal.Deserialize(input, out playerNo_) == false)
            {
                return false;
            }

            return true;
        }
        public ulong GetPlayerNo()
        {
            return playerNo_;
        }
        public void SetPlayerNo(ulong value)
        {
            playerNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_list_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private vehicle_list infos_ = new vehicle_list();
        private int selectedVehicleNo_;
        private vehicle_stuff stuffs_ = new vehicle_stuff();
        private static Yippee.Net.TypeInfo vehicle_list_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xD89BC13, "protocol.vehicle_list_ans");

        public vehicle_list_ans()
        {
        }
        public vehicle_list_ans(vehicle_list_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_list_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_list_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_list_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // infos
            infos_.Clear();
            // selectedVehicleNo
            selectedVehicleNo_ = 0;
            // stuffs
            stuffs_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // infos
            totalSize += Yippee.Net.Internal.Size(infos_);
            // selectedVehicleNo
            totalSize += Yippee.Net.Internal.Size(selectedVehicleNo_);
            // stuffs
            totalSize += Yippee.Net.Internal.Size(stuffs_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_list_ans)from);
        }
        public void CopyFrom(vehicle_list_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_list_ans)from);
        }
        public void MergeFrom(vehicle_list_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // infos
            SetInfos(from.GetInfos());
            // selectedVehicleNo
            SetSelectedVehicleNo(from.GetSelectedVehicleNo());
            // stuffs
            SetStuffs(from.GetStuffs());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // infos
            if (infos_.Serialize(stream) == false)
            {
                return false;
            }
            // selectedVehicleNo
            if (Yippee.Net.Internal.Serialize(output, selectedVehicleNo_) == false)
            {
                return false;
            }
            // stuffs
            if (stuffs_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // infos
            if (infos_.Deserialize(stream) == false)
            {
                return false;
            }
            // selectedVehicleNo
            if (Yippee.Net.Internal.Deserialize(input, out selectedVehicleNo_) == false)
            {
                return false;
            }
            // stuffs
            if (stuffs_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public vehicle_list GetInfos()
        {
            return infos_;
        }
        public void SetInfos(vehicle_list value)
        {
            infos_ = value;
        }
        public int GetSelectedVehicleNo()
        {
            return selectedVehicleNo_;
        }
        public void SetSelectedVehicleNo(int value)
        {
            selectedVehicleNo_ = value;
        }
        public vehicle_stuff GetStuffs()
        {
            return stuffs_;
        }
        public void SetStuffs(vehicle_stuff value)
        {
            stuffs_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_select_req : Yippee.Net.IObjectBase
    {
        private int vehicleNo_;
        private static Yippee.Net.TypeInfo vehicle_select_reqTypeInfo_ = new Yippee.Net.TypeInfo(0xA42EFC1, "protocol.vehicle_select_req");

        public vehicle_select_req()
        {
        }
        public vehicle_select_req(vehicle_select_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_select_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_select_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_select_req(this);
        }
        public void Clear()
        {
            // vehicleNo
            vehicleNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // vehicleNo
            totalSize += Yippee.Net.Internal.Size(vehicleNo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_select_req)from);
        }
        public void CopyFrom(vehicle_select_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_select_req)from);
        }
        public void MergeFrom(vehicle_select_req from)
        {
            if (from == this)
            {
                return;
            }

            // vehicleNo
            SetVehicleNo(from.GetVehicleNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // vehicleNo
            if (Yippee.Net.Internal.Serialize(output, vehicleNo_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // vehicleNo
            if (Yippee.Net.Internal.Deserialize(input, out vehicleNo_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetVehicleNo()
        {
            return vehicleNo_;
        }
        public void SetVehicleNo(int value)
        {
            vehicleNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_select_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private int selectedVehicleNo_;
        private static Yippee.Net.TypeInfo vehicle_select_ansTypeInfo_ = new Yippee.Net.TypeInfo(0xA42D153, "protocol.vehicle_select_ans");

        public vehicle_select_ans()
        {
        }
        public vehicle_select_ans(vehicle_select_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_select_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_select_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_select_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // selectedVehicleNo
            selectedVehicleNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // selectedVehicleNo
            totalSize += Yippee.Net.Internal.Size(selectedVehicleNo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_select_ans)from);
        }
        public void CopyFrom(vehicle_select_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_select_ans)from);
        }
        public void MergeFrom(vehicle_select_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // selectedVehicleNo
            SetSelectedVehicleNo(from.GetSelectedVehicleNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // selectedVehicleNo
            if (Yippee.Net.Internal.Serialize(output, selectedVehicleNo_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // selectedVehicleNo
            if (Yippee.Net.Internal.Deserialize(input, out selectedVehicleNo_) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public int GetSelectedVehicleNo()
        {
            return selectedVehicleNo_;
        }
        public void SetSelectedVehicleNo(int value)
        {
            selectedVehicleNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_upgrade_req : Yippee.Net.IObjectBase
    {
        private int vehicleNo_;
        private static Yippee.Net.TypeInfo vehicle_upgrade_reqTypeInfo_ = new Yippee.Net.TypeInfo(0x928D451, "protocol.vehicle_upgrade_req");

        public vehicle_upgrade_req()
        {
        }
        public vehicle_upgrade_req(vehicle_upgrade_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_upgrade_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_upgrade_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_upgrade_req(this);
        }
        public void Clear()
        {
            // vehicleNo
            vehicleNo_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // vehicleNo
            totalSize += Yippee.Net.Internal.Size(vehicleNo_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_upgrade_req)from);
        }
        public void CopyFrom(vehicle_upgrade_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_upgrade_req)from);
        }
        public void MergeFrom(vehicle_upgrade_req from)
        {
            if (from == this)
            {
                return;
            }

            // vehicleNo
            SetVehicleNo(from.GetVehicleNo());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // vehicleNo
            if (Yippee.Net.Internal.Serialize(output, vehicleNo_) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // vehicleNo
            if (Yippee.Net.Internal.Deserialize(input, out vehicleNo_) == false)
            {
                return false;
            }

            return true;
        }
        public int GetVehicleNo()
        {
            return vehicleNo_;
        }
        public void SetVehicleNo(int value)
        {
            vehicleNo_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_upgrade_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private vehicle updatedVehicle_ = new vehicle();
        private static Yippee.Net.TypeInfo vehicle_upgrade_ansTypeInfo_ = new Yippee.Net.TypeInfo(0x928ECC3, "protocol.vehicle_upgrade_ans");

        public vehicle_upgrade_ans()
        {
        }
        public vehicle_upgrade_ans(vehicle_upgrade_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_upgrade_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_upgrade_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_upgrade_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // updatedVehicle
            updatedVehicle_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // updatedVehicle
            totalSize += Yippee.Net.Internal.Size(updatedVehicle_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_upgrade_ans)from);
        }
        public void CopyFrom(vehicle_upgrade_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_upgrade_ans)from);
        }
        public void MergeFrom(vehicle_upgrade_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // updatedVehicle
            SetUpdatedVehicle(from.GetUpdatedVehicle());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // updatedVehicle
            if (updatedVehicle_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // updatedVehicle
            if (updatedVehicle_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public vehicle GetUpdatedVehicle()
        {
            return updatedVehicle_;
        }
        public void SetUpdatedVehicle(vehicle value)
        {
            updatedVehicle_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_parts_tuning_req : Yippee.Net.IObjectBase
    {
        private int vehicleNo_;
        private vehicle_parts_id partsId_;
        private static Yippee.Net.TypeInfo vehicle_parts_tuning_reqTypeInfo_ = new Yippee.Net.TypeInfo(0x633A731, "protocol.vehicle_parts_tuning_req");

        public vehicle_parts_tuning_req()
        {
        }
        public vehicle_parts_tuning_req(vehicle_parts_tuning_req from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_parts_tuning_reqTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_parts_tuning_req();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_parts_tuning_req(this);
        }
        public void Clear()
        {
            // vehicleNo
            vehicleNo_ = 0;
            // partsId
            partsId_ = 0;
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // vehicleNo
            totalSize += Yippee.Net.Internal.Size(vehicleNo_);
            // partsId
            totalSize += sizeof(int);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_parts_tuning_req)from);
        }
        public void CopyFrom(vehicle_parts_tuning_req from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_parts_tuning_req)from);
        }
        public void MergeFrom(vehicle_parts_tuning_req from)
        {
            if (from == this)
            {
                return;
            }

            // vehicleNo
            SetVehicleNo(from.GetVehicleNo());
            // partsId
            SetPartsId(from.GetPartsId());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // vehicleNo
            if (Yippee.Net.Internal.Serialize(output, vehicleNo_) == false)
            {
                return false;
            }
            // partsId
            {
                int value = (int)partsId_;
                if (Yippee.Net.Internal.Serialize(output, value) == false)
                {
                    return false;
                }
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // vehicleNo
            if (Yippee.Net.Internal.Deserialize(input, out vehicleNo_) == false)
            {
                return false;
            }
            // partsId
            {
                int value = 0;
                if (Yippee.Net.Internal.Deserialize(input, out value) == false)
                {
                    return false;
                }
                partsId_ = (vehicle_parts_id)value;
            }

            return true;
        }
        public int GetVehicleNo()
        {
            return vehicleNo_;
        }
        public void SetVehicleNo(int value)
        {
            vehicleNo_ = value;
        }
        public vehicle_parts_id GetPartsId()
        {
            return partsId_;
        }
        public void SetPartsId(vehicle_parts_id value)
        {
            partsId_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------

    public class vehicle_parts_tuning_ans : Yippee.Net.IObjectBase
    {
        private short result_;
        private vehicle updatedVehicle_ = new vehicle();
        private vehicle_stuff updatedStuffs_ = new vehicle_stuff();
        private static Yippee.Net.TypeInfo vehicle_parts_tuning_ansTypeInfo_ = new Yippee.Net.TypeInfo(0x63399A3, "protocol.vehicle_parts_tuning_ans");

        public vehicle_parts_tuning_ans()
        {
        }
        public vehicle_parts_tuning_ans(vehicle_parts_tuning_ans from)
        {
            MergeFrom(from);
        }
        public static Yippee.Net.TypeInfo StaticTypeInfo()
        {
            return vehicle_parts_tuning_ansTypeInfo_;
        }
        public Yippee.Net.TypeInfo RuntimeTypeInfo()
        {
            return StaticTypeInfo();
        }
        public Yippee.Net.IObjectBase NewInstance()
        {
            return new vehicle_parts_tuning_ans();
        }
        public Yippee.Net.IObjectBase Clone()
        {
            return new vehicle_parts_tuning_ans(this);
        }
        public void Clear()
        {
            // result
            result_ = 0;
            // updatedVehicle
            updatedVehicle_.Clear();
            // updatedStuffs
            updatedStuffs_.Clear();
        }
        public bool Initialized()
        {
            //this call is not implemented yet
            return true;
        }
        public int Size()
        {
            int totalSize = 0;

            // result
            totalSize += Yippee.Net.Internal.Size(result_);
            // updatedVehicle
            totalSize += Yippee.Net.Internal.Size(updatedVehicle_);
            // updatedStuffs
            totalSize += Yippee.Net.Internal.Size(updatedStuffs_);

            return totalSize;
        }
        public void CopyFrom(Yippee.Net.IObjectBase from)
        {
            CopyFrom((vehicle_parts_tuning_ans)from);
        }
        public void CopyFrom(vehicle_parts_tuning_ans from)
        {
            if (from == this)
            {
                return;
            }

            Clear();
            MergeFrom(from);
        }
        public void MergeFrom(Yippee.Net.IObjectBase from)
        {
            MergeFrom((vehicle_parts_tuning_ans)from);
        }
        public void MergeFrom(vehicle_parts_tuning_ans from)
        {
            if (from == this)
            {
                return;
            }

            // result
            SetResult(from.GetResult());
            // updatedVehicle
            SetUpdatedVehicle(from.GetUpdatedVehicle());
            // updatedStuffs
            SetUpdatedStuffs(from.GetUpdatedStuffs());
        }
        public bool Serialize(Stream stream)
        {
            BinaryWriter output = new BinaryWriter(stream);
            // result
            if (Yippee.Net.Internal.Serialize(output, result_) == false)
            {
                return false;
            }
            // updatedVehicle
            if (updatedVehicle_.Serialize(stream) == false)
            {
                return false;
            }
            // updatedStuffs
            if (updatedStuffs_.Serialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public bool Deserialize(Stream stream)
        {
            BinaryReader input = new BinaryReader(stream);
            // result
            if (Yippee.Net.Internal.Deserialize(input, out result_) == false)
            {
                return false;
            }
            // updatedVehicle
            if (updatedVehicle_.Deserialize(stream) == false)
            {
                return false;
            }
            // updatedStuffs
            if (updatedStuffs_.Deserialize(stream) == false)
            {
                return false;
            }

            return true;
        }
        public short GetResult()
        {
            return result_;
        }
        public void SetResult(short value)
        {
            result_ = value;
        }
        public vehicle GetUpdatedVehicle()
        {
            return updatedVehicle_;
        }
        public void SetUpdatedVehicle(vehicle value)
        {
            updatedVehicle_ = value;
        }
        public vehicle_stuff GetUpdatedStuffs()
        {
            return updatedStuffs_;
        }
        public void SetUpdatedStuffs(vehicle_stuff value)
        {
            updatedStuffs_ = value;
        }
    }
    // ------------------------------------------------------------------------------------------------


}	// namespace protocol